// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<
          ffi.Pointer<
              ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>>
      _ts_current_malloc = _lookup<
              ffi.Pointer<
                  ffi
                  .NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>>(
          'ts_current_malloc');

  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>
      get ts_current_malloc => _ts_current_malloc.value;

  set ts_current_malloc(
          ffi.Pointer<
                  ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>
              value) =>
      _ts_current_malloc.value = value;

  late final ffi.Pointer<
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>>
      _ts_current_calloc = _lookup<
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Size, ffi.Size)>>>('ts_current_calloc');

  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>
      get ts_current_calloc => _ts_current_calloc.value;

  set ts_current_calloc(
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>
              value) =>
      _ts_current_calloc.value = value;

  late final ffi.Pointer<
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Size)>>> _ts_current_realloc =
      _lookup<
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Size)>>>('ts_current_realloc');

  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size)>>
      get ts_current_realloc => _ts_current_realloc.value;

  set ts_current_realloc(
          ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(
                          ffi.Pointer<ffi.Void>, ffi.Size)>>
              value) =>
      _ts_current_realloc.value = value;

  late final ffi.Pointer<
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>>
      _ts_current_free = _lookup<
              ffi.Pointer<
                  ffi
                  .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>>(
          'ts_current_free');

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get ts_current_free => _ts_current_free.value;

  set ts_current_free(
          ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
              value) =>
      _ts_current_free.value = value;

  /// Create a new parser.
  ffi.Pointer<TSParser> ts_parser_new() {
    return _ts_parser_new();
  }

  late final _ts_parser_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<TSParser> Function()>>(
          'ts_parser_new');
  late final _ts_parser_new =
      _ts_parser_newPtr.asFunction<ffi.Pointer<TSParser> Function()>();

  /// Delete the parser, freeing all of the memory that it used.
  void ts_parser_delete(
    ffi.Pointer<TSParser> self,
  ) {
    return _ts_parser_delete(
      self,
    );
  }

  late final _ts_parser_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TSParser>)>>(
          'ts_parser_delete');
  late final _ts_parser_delete =
      _ts_parser_deletePtr.asFunction<void Function(ffi.Pointer<TSParser>)>();

  /// Get the parser's current language.
  ffi.Pointer<TSLanguage> ts_parser_language(
    ffi.Pointer<TSParser> self,
  ) {
    return _ts_parser_language(
      self,
    );
  }

  late final _ts_parser_languagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TSLanguage> Function(
              ffi.Pointer<TSParser>)>>('ts_parser_language');
  late final _ts_parser_language = _ts_parser_languagePtr
      .asFunction<ffi.Pointer<TSLanguage> Function(ffi.Pointer<TSParser>)>();

  /// Set the language that the parser should use for parsing.
  ///
  /// Returns a boolean indicating whether or not the language was successfully
  /// assigned. True means assignment succeeded. False means there was a version
  /// mismatch: the language was generated with an incompatible version of the
  /// Tree-sitter CLI. Check the language's version using [`ts_language_version`]
  /// and compare it to this library's [`TREE_SITTER_LANGUAGE_VERSION`] and
  /// [`TREE_SITTER_MIN_COMPATIBLE_LANGUAGE_VERSION`] constants.
  bool ts_parser_set_language(
    ffi.Pointer<TSParser> self,
    ffi.Pointer<TSLanguage> language,
  ) {
    return _ts_parser_set_language(
      self,
      language,
    );
  }

  late final _ts_parser_set_languagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<TSParser>,
              ffi.Pointer<TSLanguage>)>>('ts_parser_set_language');
  late final _ts_parser_set_language = _ts_parser_set_languagePtr.asFunction<
      bool Function(ffi.Pointer<TSParser>, ffi.Pointer<TSLanguage>)>();

  /// Set the ranges of text that the parser should include when parsing.
  ///
  /// By default, the parser will always include entire documents. This function
  /// allows you to parse only a *portion* of a document but still return a syntax
  /// tree whose ranges match up with the document as a whole. You can also pass
  /// multiple disjoint ranges.
  ///
  /// The second and third parameters specify the location and length of an array
  /// of ranges. The parser does *not* take ownership of these ranges; it copies
  /// the data, so it doesn't matter how these ranges are allocated.
  ///
  /// If `count` is zero, then the entire document will be parsed. Otherwise,
  /// the given ranges must be ordered from earliest to latest in the document,
  /// and they must not overlap. That is, the following must hold for all:
  ///
  /// `i < count - 1`: `ranges[i].end_byte <= ranges[i + 1].start_byte`
  ///
  /// If this requirement is not satisfied, the operation will fail, the ranges
  /// will not be assigned, and this function will return `false`. On success,
  /// this function returns `true`
  bool ts_parser_set_included_ranges(
    ffi.Pointer<TSParser> self,
    ffi.Pointer<TSRange> ranges,
    int count,
  ) {
    return _ts_parser_set_included_ranges(
      self,
      ranges,
      count,
    );
  }

  late final _ts_parser_set_included_rangesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<TSParser>, ffi.Pointer<TSRange>,
              ffi.Uint32)>>('ts_parser_set_included_ranges');
  late final _ts_parser_set_included_ranges =
      _ts_parser_set_included_rangesPtr.asFunction<
          bool Function(ffi.Pointer<TSParser>, ffi.Pointer<TSRange>, int)>();

  /// Get the ranges of text that the parser will include when parsing.
  ///
  /// The returned pointer is owned by the parser. The caller should not free it
  /// or write to it. The length of the array will be written to the given
  /// `count` pointer.
  ffi.Pointer<TSRange> ts_parser_included_ranges(
    ffi.Pointer<TSParser> self,
    ffi.Pointer<ffi.Uint32> count,
  ) {
    return _ts_parser_included_ranges(
      self,
      count,
    );
  }

  late final _ts_parser_included_rangesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TSRange> Function(ffi.Pointer<TSParser>,
              ffi.Pointer<ffi.Uint32>)>>('ts_parser_included_ranges');
  late final _ts_parser_included_ranges =
      _ts_parser_included_rangesPtr.asFunction<
          ffi.Pointer<TSRange> Function(
              ffi.Pointer<TSParser>, ffi.Pointer<ffi.Uint32>)>();

  /// Use the parser to parse some source code and create a syntax tree.
  ///
  /// If you are parsing this document for the first time, pass `NULL` for the
  /// `old_tree` parameter. Otherwise, if you have already parsed an earlier
  /// version of this document and the document has since been edited, pass the
  /// previous syntax tree so that the unchanged parts of it can be reused.
  /// This will save time and memory. For this to work correctly, you must have
  /// already edited the old syntax tree using the [`ts_tree_edit`] function in a
  /// way that exactly matches the source code changes.
  ///
  /// The [`TSInput`] parameter lets you specify how to read the text. It has the
  /// following three fields:
  /// 1. [`read`]: A function to retrieve a chunk of text at a given byte offset
  /// and (row, column) position. The function should return a pointer to the
  /// text and write its length to the [`bytes_read`] pointer. The parser does
  /// not take ownership of this buffer; it just borrows it until it has
  /// finished reading it. The function should write a zero value to the
  /// [`bytes_read`] pointer to indicate the end of the document.
  /// 2. [`payload`]: An arbitrary pointer that will be passed to each invocation
  /// of the [`read`] function.
  /// 3. [`encoding`]: An indication of how the text is encoded. Either
  /// `TSInputEncodingUTF8` or `TSInputEncodingUTF16`.
  ///
  /// This function returns a syntax tree on success, and `NULL` on failure. There
  /// are three possible reasons for failure:
  /// 1. The parser does not have a language assigned. Check for this using the
  /// [`ts_parser_language`] function.
  /// 2. Parsing was cancelled due to a timeout that was set by an earlier call to
  /// the [`ts_parser_set_timeout_micros`] function. You can resume parsing from
  /// where the parser left out by calling [`ts_parser_parse`] again with the
  /// same arguments. Or you can start parsing from scratch by first calling
  /// [`ts_parser_reset`].
  /// 3. Parsing was cancelled using a cancellation flag that was set by an
  /// earlier call to [`ts_parser_set_cancellation_flag`]. You can resume parsing
  /// from where the parser left out by calling [`ts_parser_parse`] again with
  /// the same arguments.
  ///
  /// [`read`]: TSInput::read
  /// [`payload`]: TSInput::payload
  /// [`encoding`]: TSInput::encoding
  /// [`bytes_read`]: TSInput::read
  ffi.Pointer<TSTree> ts_parser_parse(
    ffi.Pointer<TSParser> self,
    ffi.Pointer<TSTree> old_tree,
    TSInput input,
  ) {
    return _ts_parser_parse(
      self,
      old_tree,
      input,
    );
  }

  late final _ts_parser_parsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TSTree> Function(ffi.Pointer<TSParser>,
              ffi.Pointer<TSTree>, TSInput)>>('ts_parser_parse');
  late final _ts_parser_parse = _ts_parser_parsePtr.asFunction<
      ffi.Pointer<TSTree> Function(
          ffi.Pointer<TSParser>, ffi.Pointer<TSTree>, TSInput)>();

  /// Use the parser to parse some source code stored in one contiguous buffer.
  /// The first two parameters are the same as in the [`ts_parser_parse`] function
  /// above. The second two parameters indicate the location of the buffer and its
  /// length in bytes.
  ffi.Pointer<TSTree> ts_parser_parse_string(
    ffi.Pointer<TSParser> self,
    ffi.Pointer<TSTree> old_tree,
    ffi.Pointer<ffi.Char> string,
    int length,
  ) {
    return _ts_parser_parse_string(
      self,
      old_tree,
      string,
      length,
    );
  }

  late final _ts_parser_parse_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TSTree> Function(
              ffi.Pointer<TSParser>,
              ffi.Pointer<TSTree>,
              ffi.Pointer<ffi.Char>,
              ffi.Uint32)>>('ts_parser_parse_string');
  late final _ts_parser_parse_string = _ts_parser_parse_stringPtr.asFunction<
      ffi.Pointer<TSTree> Function(ffi.Pointer<TSParser>, ffi.Pointer<TSTree>,
          ffi.Pointer<ffi.Char>, int)>();

  /// Use the parser to parse some source code stored in one contiguous buffer with
  /// a given encoding. The first four parameters work the same as in the
  /// [`ts_parser_parse_string`] method above. The final parameter indicates whether
  /// the text is encoded as UTF8 or UTF16.
  ffi.Pointer<TSTree> ts_parser_parse_string_encoding(
    ffi.Pointer<TSParser> self,
    ffi.Pointer<TSTree> old_tree,
    ffi.Pointer<ffi.Char> string,
    int length,
    TSInputEncoding encoding,
  ) {
    return _ts_parser_parse_string_encoding(
      self,
      old_tree,
      string,
      length,
      encoding.value,
    );
  }

  late final _ts_parser_parse_string_encodingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TSTree> Function(
              ffi.Pointer<TSParser>,
              ffi.Pointer<TSTree>,
              ffi.Pointer<ffi.Char>,
              ffi.Uint32,
              ffi.UnsignedInt)>>('ts_parser_parse_string_encoding');
  late final _ts_parser_parse_string_encoding =
      _ts_parser_parse_string_encodingPtr.asFunction<
          ffi.Pointer<TSTree> Function(ffi.Pointer<TSParser>,
              ffi.Pointer<TSTree>, ffi.Pointer<ffi.Char>, int, int)>();

  /// Instruct the parser to start the next parse from the beginning.
  ///
  /// If the parser previously failed because of a timeout or a cancellation, then
  /// by default, it will resume where it left off on the next call to
  /// [`ts_parser_parse`] or other parsing functions. If you don't want to resume,
  /// and instead intend to use this parser to parse some other document, you must
  /// call [`ts_parser_reset`] first.
  void ts_parser_reset(
    ffi.Pointer<TSParser> self,
  ) {
    return _ts_parser_reset(
      self,
    );
  }

  late final _ts_parser_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TSParser>)>>(
          'ts_parser_reset');
  late final _ts_parser_reset =
      _ts_parser_resetPtr.asFunction<void Function(ffi.Pointer<TSParser>)>();

  /// Set the maximum duration in microseconds that parsing should be allowed to
  /// take before halting.
  ///
  /// If parsing takes longer than this, it will halt early, returning NULL.
  /// See [`ts_parser_parse`] for more information.
  void ts_parser_set_timeout_micros(
    ffi.Pointer<TSParser> self,
    int timeout_micros,
  ) {
    return _ts_parser_set_timeout_micros(
      self,
      timeout_micros,
    );
  }

  late final _ts_parser_set_timeout_microsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TSParser>,
              ffi.Uint64)>>('ts_parser_set_timeout_micros');
  late final _ts_parser_set_timeout_micros = _ts_parser_set_timeout_microsPtr
      .asFunction<void Function(ffi.Pointer<TSParser>, int)>();

  /// Get the duration in microseconds that parsing is allowed to take.
  int ts_parser_timeout_micros(
    ffi.Pointer<TSParser> self,
  ) {
    return _ts_parser_timeout_micros(
      self,
    );
  }

  late final _ts_parser_timeout_microsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<TSParser>)>>(
          'ts_parser_timeout_micros');
  late final _ts_parser_timeout_micros = _ts_parser_timeout_microsPtr
      .asFunction<int Function(ffi.Pointer<TSParser>)>();

  /// Set the parser's current cancellation flag pointer.
  ///
  /// If a non-null pointer is assigned, then the parser will periodically read
  /// from this pointer during parsing. If it reads a non-zero value, it will
  /// halt early, returning NULL. See [`ts_parser_parse`] for more information.
  void ts_parser_set_cancellation_flag(
    ffi.Pointer<TSParser> self,
    ffi.Pointer<ffi.Size> flag,
  ) {
    return _ts_parser_set_cancellation_flag(
      self,
      flag,
    );
  }

  late final _ts_parser_set_cancellation_flagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TSParser>,
              ffi.Pointer<ffi.Size>)>>('ts_parser_set_cancellation_flag');
  late final _ts_parser_set_cancellation_flag =
      _ts_parser_set_cancellation_flagPtr.asFunction<
          void Function(ffi.Pointer<TSParser>, ffi.Pointer<ffi.Size>)>();

  /// Get the parser's current cancellation flag pointer.
  ffi.Pointer<ffi.Size> ts_parser_cancellation_flag(
    ffi.Pointer<TSParser> self,
  ) {
    return _ts_parser_cancellation_flag(
      self,
    );
  }

  late final _ts_parser_cancellation_flagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Size> Function(
              ffi.Pointer<TSParser>)>>('ts_parser_cancellation_flag');
  late final _ts_parser_cancellation_flag = _ts_parser_cancellation_flagPtr
      .asFunction<ffi.Pointer<ffi.Size> Function(ffi.Pointer<TSParser>)>();

  /// Set the logger that a parser should use during parsing.
  ///
  /// The parser does not take ownership over the logger payload. If a logger was
  /// previously assigned, the caller is responsible for releasing any memory
  /// owned by the previous logger.
  void ts_parser_set_logger(
    ffi.Pointer<TSParser> self,
    TSLogger logger,
  ) {
    return _ts_parser_set_logger(
      self,
      logger,
    );
  }

  late final _ts_parser_set_loggerPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<TSParser>, TSLogger)>>(
      'ts_parser_set_logger');
  late final _ts_parser_set_logger = _ts_parser_set_loggerPtr
      .asFunction<void Function(ffi.Pointer<TSParser>, TSLogger)>();

  /// Get the parser's current logger.
  TSLogger ts_parser_logger(
    ffi.Pointer<TSParser> self,
  ) {
    return _ts_parser_logger(
      self,
    );
  }

  late final _ts_parser_loggerPtr =
      _lookup<ffi.NativeFunction<TSLogger Function(ffi.Pointer<TSParser>)>>(
          'ts_parser_logger');
  late final _ts_parser_logger = _ts_parser_loggerPtr
      .asFunction<TSLogger Function(ffi.Pointer<TSParser>)>();

  /// Set the file descriptor to which the parser should write debugging graphs
  /// during parsing. The graphs are formatted in the DOT language. You may want
  /// to pipe these graphs directly to a `dot(1)` process in order to generate
  /// SVG output. You can turn off this logging by passing a negative number.
  void ts_parser_print_dot_graphs(
    ffi.Pointer<TSParser> self,
    int fd,
  ) {
    return _ts_parser_print_dot_graphs(
      self,
      fd,
    );
  }

  late final _ts_parser_print_dot_graphsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<TSParser>, ffi.Int)>>(
      'ts_parser_print_dot_graphs');
  late final _ts_parser_print_dot_graphs = _ts_parser_print_dot_graphsPtr
      .asFunction<void Function(ffi.Pointer<TSParser>, int)>();

  /// Create a shallow copy of the syntax tree. This is very fast.
  ///
  /// You need to copy a syntax tree in order to use it on more than one thread at
  /// a time, as syntax trees are not thread safe.
  ffi.Pointer<TSTree> ts_tree_copy(
    ffi.Pointer<TSTree> self,
  ) {
    return _ts_tree_copy(
      self,
    );
  }

  late final _ts_tree_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TSTree> Function(ffi.Pointer<TSTree>)>>('ts_tree_copy');
  late final _ts_tree_copy = _ts_tree_copyPtr
      .asFunction<ffi.Pointer<TSTree> Function(ffi.Pointer<TSTree>)>();

  /// Delete the syntax tree, freeing all of the memory that it used.
  void ts_tree_delete(
    ffi.Pointer<TSTree> self,
  ) {
    return _ts_tree_delete(
      self,
    );
  }

  late final _ts_tree_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TSTree>)>>(
          'ts_tree_delete');
  late final _ts_tree_delete =
      _ts_tree_deletePtr.asFunction<void Function(ffi.Pointer<TSTree>)>();

  /// Get the root node of the syntax tree.
  TSNode ts_tree_root_node(
    ffi.Pointer<TSTree> self,
  ) {
    return _ts_tree_root_node(
      self,
    );
  }

  late final _ts_tree_root_nodePtr =
      _lookup<ffi.NativeFunction<TSNode Function(ffi.Pointer<TSTree>)>>(
          'ts_tree_root_node');
  late final _ts_tree_root_node =
      _ts_tree_root_nodePtr.asFunction<TSNode Function(ffi.Pointer<TSTree>)>();

  /// Get the root node of the syntax tree, but with its position
  /// shifted forward by the given offset.
  TSNode ts_tree_root_node_with_offset(
    ffi.Pointer<TSTree> self,
    int offset_bytes,
    TSPoint offset_extent,
  ) {
    return _ts_tree_root_node_with_offset(
      self,
      offset_bytes,
      offset_extent,
    );
  }

  late final _ts_tree_root_node_with_offsetPtr = _lookup<
      ffi.NativeFunction<
          TSNode Function(ffi.Pointer<TSTree>, ffi.Uint32,
              TSPoint)>>('ts_tree_root_node_with_offset');
  late final _ts_tree_root_node_with_offset = _ts_tree_root_node_with_offsetPtr
      .asFunction<TSNode Function(ffi.Pointer<TSTree>, int, TSPoint)>();

  /// Get the language that was used to parse the syntax tree.
  ffi.Pointer<TSLanguage> ts_tree_language(
    ffi.Pointer<TSTree> self,
  ) {
    return _ts_tree_language(
      self,
    );
  }

  late final _ts_tree_languagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TSLanguage> Function(
              ffi.Pointer<TSTree>)>>('ts_tree_language');
  late final _ts_tree_language = _ts_tree_languagePtr
      .asFunction<ffi.Pointer<TSLanguage> Function(ffi.Pointer<TSTree>)>();

  /// Get the array of included ranges that was used to parse the syntax tree.
  ///
  /// The returned pointer must be freed by the caller.
  ffi.Pointer<TSRange> ts_tree_included_ranges(
    ffi.Pointer<TSTree> self,
    ffi.Pointer<ffi.Uint32> length,
  ) {
    return _ts_tree_included_ranges(
      self,
      length,
    );
  }

  late final _ts_tree_included_rangesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TSRange> Function(ffi.Pointer<TSTree>,
              ffi.Pointer<ffi.Uint32>)>>('ts_tree_included_ranges');
  late final _ts_tree_included_ranges = _ts_tree_included_rangesPtr.asFunction<
      ffi.Pointer<TSRange> Function(
          ffi.Pointer<TSTree>, ffi.Pointer<ffi.Uint32>)>();

  /// Edit the syntax tree to keep it in sync with source code that has been
  /// edited.
  ///
  /// You must describe the edit both in terms of byte offsets and in terms of
  /// (row, column) coordinates.
  void ts_tree_edit(
    ffi.Pointer<TSTree> self,
    ffi.Pointer<TSInputEdit> edit,
  ) {
    return _ts_tree_edit(
      self,
      edit,
    );
  }

  late final _ts_tree_editPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<TSTree>, ffi.Pointer<TSInputEdit>)>>('ts_tree_edit');
  late final _ts_tree_edit = _ts_tree_editPtr.asFunction<
      void Function(ffi.Pointer<TSTree>, ffi.Pointer<TSInputEdit>)>();

  /// Compare an old edited syntax tree to a new syntax tree representing the same
  /// document, returning an array of ranges whose syntactic structure has changed.
  ///
  /// For this to work correctly, the old syntax tree must have been edited such
  /// that its ranges match up to the new tree. Generally, you'll want to call
  /// this function right after calling one of the [`ts_parser_parse`] functions.
  /// You need to pass the old tree that was passed to parse, as well as the new
  /// tree that was returned from that function.
  ///
  /// The returned array is allocated using `malloc` and the caller is responsible
  /// for freeing it using `free`. The length of the array will be written to the
  /// given `length` pointer.
  ffi.Pointer<TSRange> ts_tree_get_changed_ranges(
    ffi.Pointer<TSTree> old_tree,
    ffi.Pointer<TSTree> new_tree,
    ffi.Pointer<ffi.Uint32> length,
  ) {
    return _ts_tree_get_changed_ranges(
      old_tree,
      new_tree,
      length,
    );
  }

  late final _ts_tree_get_changed_rangesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TSRange> Function(
              ffi.Pointer<TSTree>,
              ffi.Pointer<TSTree>,
              ffi.Pointer<ffi.Uint32>)>>('ts_tree_get_changed_ranges');
  late final _ts_tree_get_changed_ranges =
      _ts_tree_get_changed_rangesPtr.asFunction<
          ffi.Pointer<TSRange> Function(ffi.Pointer<TSTree>,
              ffi.Pointer<TSTree>, ffi.Pointer<ffi.Uint32>)>();

  /// Write a DOT graph describing the syntax tree to the given file.
  void ts_tree_print_dot_graph(
    ffi.Pointer<TSTree> self,
    int file_descriptor,
  ) {
    return _ts_tree_print_dot_graph(
      self,
      file_descriptor,
    );
  }

  late final _ts_tree_print_dot_graphPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TSTree>, ffi.Int)>>(
      'ts_tree_print_dot_graph');
  late final _ts_tree_print_dot_graph = _ts_tree_print_dot_graphPtr
      .asFunction<void Function(ffi.Pointer<TSTree>, int)>();

  /// Get the node's type as a null-terminated string.
  ffi.Pointer<ffi.Char> ts_node_type(
    TSNode self,
  ) {
    return _ts_node_type(
      self,
    );
  }

  late final _ts_node_typePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(TSNode)>>(
          'ts_node_type');
  late final _ts_node_type =
      _ts_node_typePtr.asFunction<ffi.Pointer<ffi.Char> Function(TSNode)>();

  /// Get the node's type as a numerical id.
  int ts_node_symbol(
    TSNode self,
  ) {
    return _ts_node_symbol(
      self,
    );
  }

  late final _ts_node_symbolPtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(TSNode)>>(
          'ts_node_symbol');
  late final _ts_node_symbol =
      _ts_node_symbolPtr.asFunction<int Function(TSNode)>();

  /// Get the node's language.
  ffi.Pointer<TSLanguage> ts_node_language(
    TSNode self,
  ) {
    return _ts_node_language(
      self,
    );
  }

  late final _ts_node_languagePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<TSLanguage> Function(TSNode)>>(
          'ts_node_language');
  late final _ts_node_language = _ts_node_languagePtr
      .asFunction<ffi.Pointer<TSLanguage> Function(TSNode)>();

  /// Get the node's type as it appears in the grammar ignoring aliases as a
  /// null-terminated string.
  ffi.Pointer<ffi.Char> ts_node_grammar_type(
    TSNode self,
  ) {
    return _ts_node_grammar_type(
      self,
    );
  }

  late final _ts_node_grammar_typePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(TSNode)>>(
          'ts_node_grammar_type');
  late final _ts_node_grammar_type = _ts_node_grammar_typePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(TSNode)>();

  /// Get the node's type as a numerical id as it appears in the grammar ignoring
  /// aliases. This should be used in [`ts_language_next_state`] instead of
  /// [`ts_node_symbol`].
  int ts_node_grammar_symbol(
    TSNode self,
  ) {
    return _ts_node_grammar_symbol(
      self,
    );
  }

  late final _ts_node_grammar_symbolPtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(TSNode)>>(
          'ts_node_grammar_symbol');
  late final _ts_node_grammar_symbol =
      _ts_node_grammar_symbolPtr.asFunction<int Function(TSNode)>();

  /// Get the node's start byte.
  int ts_node_start_byte(
    TSNode self,
  ) {
    return _ts_node_start_byte(
      self,
    );
  }

  late final _ts_node_start_bytePtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(TSNode)>>(
          'ts_node_start_byte');
  late final _ts_node_start_byte =
      _ts_node_start_bytePtr.asFunction<int Function(TSNode)>();

  /// Get the node's start position in terms of rows and columns.
  TSPoint ts_node_start_point(
    TSNode self,
  ) {
    return _ts_node_start_point(
      self,
    );
  }

  late final _ts_node_start_pointPtr =
      _lookup<ffi.NativeFunction<TSPoint Function(TSNode)>>(
          'ts_node_start_point');
  late final _ts_node_start_point =
      _ts_node_start_pointPtr.asFunction<TSPoint Function(TSNode)>();

  /// Get the node's end byte.
  int ts_node_end_byte(
    TSNode self,
  ) {
    return _ts_node_end_byte(
      self,
    );
  }

  late final _ts_node_end_bytePtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(TSNode)>>(
          'ts_node_end_byte');
  late final _ts_node_end_byte =
      _ts_node_end_bytePtr.asFunction<int Function(TSNode)>();

  /// Get the node's end position in terms of rows and columns.
  TSPoint ts_node_end_point(
    TSNode self,
  ) {
    return _ts_node_end_point(
      self,
    );
  }

  late final _ts_node_end_pointPtr =
      _lookup<ffi.NativeFunction<TSPoint Function(TSNode)>>(
          'ts_node_end_point');
  late final _ts_node_end_point =
      _ts_node_end_pointPtr.asFunction<TSPoint Function(TSNode)>();

  /// Get an S-expression representing the node as a string.
  ///
  /// This string is allocated with `malloc` and the caller is responsible for
  /// freeing it using `free`.
  ffi.Pointer<ffi.Char> ts_node_string(
    TSNode self,
  ) {
    return _ts_node_string(
      self,
    );
  }

  late final _ts_node_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(TSNode)>>(
          'ts_node_string');
  late final _ts_node_string =
      _ts_node_stringPtr.asFunction<ffi.Pointer<ffi.Char> Function(TSNode)>();

  /// Check if the node is null. Functions like [`ts_node_child`] and
  /// [`ts_node_next_sibling`] will return a null node to indicate that no such node
  /// was found.
  bool ts_node_is_null(
    TSNode self,
  ) {
    return _ts_node_is_null(
      self,
    );
  }

  late final _ts_node_is_nullPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(TSNode)>>('ts_node_is_null');
  late final _ts_node_is_null =
      _ts_node_is_nullPtr.asFunction<bool Function(TSNode)>();

  /// Check if the node is *named*. Named nodes correspond to named rules in the
  /// grammar, whereas *anonymous* nodes correspond to string literals in the
  /// grammar.
  bool ts_node_is_named(
    TSNode self,
  ) {
    return _ts_node_is_named(
      self,
    );
  }

  late final _ts_node_is_namedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(TSNode)>>(
          'ts_node_is_named');
  late final _ts_node_is_named =
      _ts_node_is_namedPtr.asFunction<bool Function(TSNode)>();

  /// Check if the node is *missing*. Missing nodes are inserted by the parser in
  /// order to recover from certain kinds of syntax errors.
  bool ts_node_is_missing(
    TSNode self,
  ) {
    return _ts_node_is_missing(
      self,
    );
  }

  late final _ts_node_is_missingPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(TSNode)>>(
          'ts_node_is_missing');
  late final _ts_node_is_missing =
      _ts_node_is_missingPtr.asFunction<bool Function(TSNode)>();

  /// Check if the node is *extra*. Extra nodes represent things like comments,
  /// which are not required the grammar, but can appear anywhere.
  bool ts_node_is_extra(
    TSNode self,
  ) {
    return _ts_node_is_extra(
      self,
    );
  }

  late final _ts_node_is_extraPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(TSNode)>>(
          'ts_node_is_extra');
  late final _ts_node_is_extra =
      _ts_node_is_extraPtr.asFunction<bool Function(TSNode)>();

  /// Check if a syntax node has been edited.
  bool ts_node_has_changes(
    TSNode self,
  ) {
    return _ts_node_has_changes(
      self,
    );
  }

  late final _ts_node_has_changesPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(TSNode)>>(
          'ts_node_has_changes');
  late final _ts_node_has_changes =
      _ts_node_has_changesPtr.asFunction<bool Function(TSNode)>();

  /// Check if the node is a syntax error or contains any syntax errors.
  bool ts_node_has_error(
    TSNode self,
  ) {
    return _ts_node_has_error(
      self,
    );
  }

  late final _ts_node_has_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(TSNode)>>(
          'ts_node_has_error');
  late final _ts_node_has_error =
      _ts_node_has_errorPtr.asFunction<bool Function(TSNode)>();

  /// Check if the node is a syntax error.
  bool ts_node_is_error(
    TSNode self,
  ) {
    return _ts_node_is_error(
      self,
    );
  }

  late final _ts_node_is_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(TSNode)>>(
          'ts_node_is_error');
  late final _ts_node_is_error =
      _ts_node_is_errorPtr.asFunction<bool Function(TSNode)>();

  /// Get this node's parse state.
  int ts_node_parse_state(
    TSNode self,
  ) {
    return _ts_node_parse_state(
      self,
    );
  }

  late final _ts_node_parse_statePtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(TSNode)>>(
          'ts_node_parse_state');
  late final _ts_node_parse_state =
      _ts_node_parse_statePtr.asFunction<int Function(TSNode)>();

  /// Get the parse state after this node.
  int ts_node_next_parse_state(
    TSNode self,
  ) {
    return _ts_node_next_parse_state(
      self,
    );
  }

  late final _ts_node_next_parse_statePtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(TSNode)>>(
          'ts_node_next_parse_state');
  late final _ts_node_next_parse_state =
      _ts_node_next_parse_statePtr.asFunction<int Function(TSNode)>();

  /// Get the node's immediate parent.
  /// Prefer [`ts_node_child_containing_descendant`] for
  /// iterating over the node's ancestors.
  TSNode ts_node_parent(
    TSNode self,
  ) {
    return _ts_node_parent(
      self,
    );
  }

  late final _ts_node_parentPtr =
      _lookup<ffi.NativeFunction<TSNode Function(TSNode)>>('ts_node_parent');
  late final _ts_node_parent =
      _ts_node_parentPtr.asFunction<TSNode Function(TSNode)>();

  /// Get the node's child that contains `descendant`.
  TSNode ts_node_child_containing_descendant(
    TSNode self,
    TSNode descendant,
  ) {
    return _ts_node_child_containing_descendant(
      self,
      descendant,
    );
  }

  late final _ts_node_child_containing_descendantPtr =
      _lookup<ffi.NativeFunction<TSNode Function(TSNode, TSNode)>>(
          'ts_node_child_containing_descendant');
  late final _ts_node_child_containing_descendant =
      _ts_node_child_containing_descendantPtr
          .asFunction<TSNode Function(TSNode, TSNode)>();

  /// Get the node's child at the given index, where zero represents the first
  /// child.
  TSNode ts_node_child(
    TSNode self,
    int child_index,
  ) {
    return _ts_node_child(
      self,
      child_index,
    );
  }

  late final _ts_node_childPtr =
      _lookup<ffi.NativeFunction<TSNode Function(TSNode, ffi.Uint32)>>(
          'ts_node_child');
  late final _ts_node_child =
      _ts_node_childPtr.asFunction<TSNode Function(TSNode, int)>();

  /// Get the field name for node's child at the given index, where zero represents
  /// the first child. Returns NULL, if no field is found.
  ffi.Pointer<ffi.Char> ts_node_field_name_for_child(
    TSNode self,
    int child_index,
  ) {
    return _ts_node_field_name_for_child(
      self,
      child_index,
    );
  }

  late final _ts_node_field_name_for_childPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(TSNode, ffi.Uint32)>>(
      'ts_node_field_name_for_child');
  late final _ts_node_field_name_for_child = _ts_node_field_name_for_childPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(TSNode, int)>();

  /// Get the node's number of children.
  int ts_node_child_count(
    TSNode self,
  ) {
    return _ts_node_child_count(
      self,
    );
  }

  late final _ts_node_child_countPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(TSNode)>>(
          'ts_node_child_count');
  late final _ts_node_child_count =
      _ts_node_child_countPtr.asFunction<int Function(TSNode)>();

  /// Get the node's *named* child at the given index.
  ///
  /// See also [`ts_node_is_named`].
  TSNode ts_node_named_child(
    TSNode self,
    int child_index,
  ) {
    return _ts_node_named_child(
      self,
      child_index,
    );
  }

  late final _ts_node_named_childPtr =
      _lookup<ffi.NativeFunction<TSNode Function(TSNode, ffi.Uint32)>>(
          'ts_node_named_child');
  late final _ts_node_named_child =
      _ts_node_named_childPtr.asFunction<TSNode Function(TSNode, int)>();

  /// Get the node's number of *named* children.
  ///
  /// See also [`ts_node_is_named`].
  int ts_node_named_child_count(
    TSNode self,
  ) {
    return _ts_node_named_child_count(
      self,
    );
  }

  late final _ts_node_named_child_countPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(TSNode)>>(
          'ts_node_named_child_count');
  late final _ts_node_named_child_count =
      _ts_node_named_child_countPtr.asFunction<int Function(TSNode)>();

  /// Get the node's child with the given field name.
  TSNode ts_node_child_by_field_name(
    TSNode self,
    ffi.Pointer<ffi.Char> name,
    int name_length,
  ) {
    return _ts_node_child_by_field_name(
      self,
      name,
      name_length,
    );
  }

  late final _ts_node_child_by_field_namePtr = _lookup<
      ffi.NativeFunction<
          TSNode Function(TSNode, ffi.Pointer<ffi.Char>,
              ffi.Uint32)>>('ts_node_child_by_field_name');
  late final _ts_node_child_by_field_name = _ts_node_child_by_field_namePtr
      .asFunction<TSNode Function(TSNode, ffi.Pointer<ffi.Char>, int)>();

  /// Get the node's child with the given numerical field id.
  ///
  /// You can convert a field name to an id using the
  /// [`ts_language_field_id_for_name`] function.
  TSNode ts_node_child_by_field_id(
    TSNode self,
    int field_id,
  ) {
    return _ts_node_child_by_field_id(
      self,
      field_id,
    );
  }

  late final _ts_node_child_by_field_idPtr =
      _lookup<ffi.NativeFunction<TSNode Function(TSNode, ffi.Uint16)>>(
          'ts_node_child_by_field_id');
  late final _ts_node_child_by_field_id =
      _ts_node_child_by_field_idPtr.asFunction<TSNode Function(TSNode, int)>();

  /// Get the node's next / previous sibling.
  TSNode ts_node_next_sibling(
    TSNode self,
  ) {
    return _ts_node_next_sibling(
      self,
    );
  }

  late final _ts_node_next_siblingPtr =
      _lookup<ffi.NativeFunction<TSNode Function(TSNode)>>(
          'ts_node_next_sibling');
  late final _ts_node_next_sibling =
      _ts_node_next_siblingPtr.asFunction<TSNode Function(TSNode)>();

  TSNode ts_node_prev_sibling(
    TSNode self,
  ) {
    return _ts_node_prev_sibling(
      self,
    );
  }

  late final _ts_node_prev_siblingPtr =
      _lookup<ffi.NativeFunction<TSNode Function(TSNode)>>(
          'ts_node_prev_sibling');
  late final _ts_node_prev_sibling =
      _ts_node_prev_siblingPtr.asFunction<TSNode Function(TSNode)>();

  /// Get the node's next / previous *named* sibling.
  TSNode ts_node_next_named_sibling(
    TSNode self,
  ) {
    return _ts_node_next_named_sibling(
      self,
    );
  }

  late final _ts_node_next_named_siblingPtr =
      _lookup<ffi.NativeFunction<TSNode Function(TSNode)>>(
          'ts_node_next_named_sibling');
  late final _ts_node_next_named_sibling =
      _ts_node_next_named_siblingPtr.asFunction<TSNode Function(TSNode)>();

  TSNode ts_node_prev_named_sibling(
    TSNode self,
  ) {
    return _ts_node_prev_named_sibling(
      self,
    );
  }

  late final _ts_node_prev_named_siblingPtr =
      _lookup<ffi.NativeFunction<TSNode Function(TSNode)>>(
          'ts_node_prev_named_sibling');
  late final _ts_node_prev_named_sibling =
      _ts_node_prev_named_siblingPtr.asFunction<TSNode Function(TSNode)>();

  /// Get the node's first child that extends beyond the given byte offset.
  TSNode ts_node_first_child_for_byte(
    TSNode self,
    int byte,
  ) {
    return _ts_node_first_child_for_byte(
      self,
      byte,
    );
  }

  late final _ts_node_first_child_for_bytePtr =
      _lookup<ffi.NativeFunction<TSNode Function(TSNode, ffi.Uint32)>>(
          'ts_node_first_child_for_byte');
  late final _ts_node_first_child_for_byte = _ts_node_first_child_for_bytePtr
      .asFunction<TSNode Function(TSNode, int)>();

  /// Get the node's first named child that extends beyond the given byte offset.
  TSNode ts_node_first_named_child_for_byte(
    TSNode self,
    int byte,
  ) {
    return _ts_node_first_named_child_for_byte(
      self,
      byte,
    );
  }

  late final _ts_node_first_named_child_for_bytePtr =
      _lookup<ffi.NativeFunction<TSNode Function(TSNode, ffi.Uint32)>>(
          'ts_node_first_named_child_for_byte');
  late final _ts_node_first_named_child_for_byte =
      _ts_node_first_named_child_for_bytePtr
          .asFunction<TSNode Function(TSNode, int)>();

  /// Get the node's number of descendants, including one for the node itself.
  int ts_node_descendant_count(
    TSNode self,
  ) {
    return _ts_node_descendant_count(
      self,
    );
  }

  late final _ts_node_descendant_countPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(TSNode)>>(
          'ts_node_descendant_count');
  late final _ts_node_descendant_count =
      _ts_node_descendant_countPtr.asFunction<int Function(TSNode)>();

  /// Get the smallest node within this node that spans the given range of bytes
  /// or (row, column) positions.
  TSNode ts_node_descendant_for_byte_range(
    TSNode self,
    int start,
    int end,
  ) {
    return _ts_node_descendant_for_byte_range(
      self,
      start,
      end,
    );
  }

  late final _ts_node_descendant_for_byte_rangePtr = _lookup<
          ffi.NativeFunction<TSNode Function(TSNode, ffi.Uint32, ffi.Uint32)>>(
      'ts_node_descendant_for_byte_range');
  late final _ts_node_descendant_for_byte_range =
      _ts_node_descendant_for_byte_rangePtr
          .asFunction<TSNode Function(TSNode, int, int)>();

  TSNode ts_node_descendant_for_point_range(
    TSNode self,
    TSPoint start,
    TSPoint end,
  ) {
    return _ts_node_descendant_for_point_range(
      self,
      start,
      end,
    );
  }

  late final _ts_node_descendant_for_point_rangePtr =
      _lookup<ffi.NativeFunction<TSNode Function(TSNode, TSPoint, TSPoint)>>(
          'ts_node_descendant_for_point_range');
  late final _ts_node_descendant_for_point_range =
      _ts_node_descendant_for_point_rangePtr
          .asFunction<TSNode Function(TSNode, TSPoint, TSPoint)>();

  /// Get the smallest named node within this node that spans the given range of
  /// bytes or (row, column) positions.
  TSNode ts_node_named_descendant_for_byte_range(
    TSNode self,
    int start,
    int end,
  ) {
    return _ts_node_named_descendant_for_byte_range(
      self,
      start,
      end,
    );
  }

  late final _ts_node_named_descendant_for_byte_rangePtr = _lookup<
          ffi.NativeFunction<TSNode Function(TSNode, ffi.Uint32, ffi.Uint32)>>(
      'ts_node_named_descendant_for_byte_range');
  late final _ts_node_named_descendant_for_byte_range =
      _ts_node_named_descendant_for_byte_rangePtr
          .asFunction<TSNode Function(TSNode, int, int)>();

  TSNode ts_node_named_descendant_for_point_range(
    TSNode self,
    TSPoint start,
    TSPoint end,
  ) {
    return _ts_node_named_descendant_for_point_range(
      self,
      start,
      end,
    );
  }

  late final _ts_node_named_descendant_for_point_rangePtr =
      _lookup<ffi.NativeFunction<TSNode Function(TSNode, TSPoint, TSPoint)>>(
          'ts_node_named_descendant_for_point_range');
  late final _ts_node_named_descendant_for_point_range =
      _ts_node_named_descendant_for_point_rangePtr
          .asFunction<TSNode Function(TSNode, TSPoint, TSPoint)>();

  /// Edit the node to keep it in-sync with source code that has been edited.
  ///
  /// This function is only rarely needed. When you edit a syntax tree with the
  /// [`ts_tree_edit`] function, all of the nodes that you retrieve from the tree
  /// afterward will already reflect the edit. You only need to use [`ts_node_edit`]
  /// when you have a [`TSNode`] instance that you want to keep and continue to use
  /// after an edit.
  void ts_node_edit(
    ffi.Pointer<TSNode> self,
    ffi.Pointer<TSInputEdit> edit,
  ) {
    return _ts_node_edit(
      self,
      edit,
    );
  }

  late final _ts_node_editPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<TSNode>, ffi.Pointer<TSInputEdit>)>>('ts_node_edit');
  late final _ts_node_edit = _ts_node_editPtr.asFunction<
      void Function(ffi.Pointer<TSNode>, ffi.Pointer<TSInputEdit>)>();

  /// Check if two nodes are identical.
  bool ts_node_eq(
    TSNode self,
    TSNode other,
  ) {
    return _ts_node_eq(
      self,
      other,
    );
  }

  late final _ts_node_eqPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(TSNode, TSNode)>>(
          'ts_node_eq');
  late final _ts_node_eq =
      _ts_node_eqPtr.asFunction<bool Function(TSNode, TSNode)>();

  /// Create a new tree cursor starting from the given node.
  ///
  /// A tree cursor allows you to walk a syntax tree more efficiently than is
  /// possible using the [`TSNode`] functions. It is a mutable object that is always
  /// on a certain syntax node, and can be moved imperatively to different nodes.
  TSTreeCursor ts_tree_cursor_new(
    TSNode node,
  ) {
    return _ts_tree_cursor_new(
      node,
    );
  }

  late final _ts_tree_cursor_newPtr =
      _lookup<ffi.NativeFunction<TSTreeCursor Function(TSNode)>>(
          'ts_tree_cursor_new');
  late final _ts_tree_cursor_new =
      _ts_tree_cursor_newPtr.asFunction<TSTreeCursor Function(TSNode)>();

  /// Delete a tree cursor, freeing all of the memory that it used.
  void ts_tree_cursor_delete(
    ffi.Pointer<TSTreeCursor> self,
  ) {
    return _ts_tree_cursor_delete(
      self,
    );
  }

  late final _ts_tree_cursor_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TSTreeCursor>)>>(
          'ts_tree_cursor_delete');
  late final _ts_tree_cursor_delete = _ts_tree_cursor_deletePtr
      .asFunction<void Function(ffi.Pointer<TSTreeCursor>)>();

  /// Re-initialize a tree cursor to start at a different node.
  void ts_tree_cursor_reset(
    ffi.Pointer<TSTreeCursor> self,
    TSNode node,
  ) {
    return _ts_tree_cursor_reset(
      self,
      node,
    );
  }

  late final _ts_tree_cursor_resetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<TSTreeCursor>, TSNode)>>('ts_tree_cursor_reset');
  late final _ts_tree_cursor_reset = _ts_tree_cursor_resetPtr
      .asFunction<void Function(ffi.Pointer<TSTreeCursor>, TSNode)>();

  /// Re-initialize a tree cursor to the same position as another cursor.
  ///
  /// Unlike [`ts_tree_cursor_reset`], this will not lose parent information and
  /// allows reusing already created cursors.
  void ts_tree_cursor_reset_to(
    ffi.Pointer<TSTreeCursor> dst,
    ffi.Pointer<TSTreeCursor> src,
  ) {
    return _ts_tree_cursor_reset_to(
      dst,
      src,
    );
  }

  late final _ts_tree_cursor_reset_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TSTreeCursor>,
              ffi.Pointer<TSTreeCursor>)>>('ts_tree_cursor_reset_to');
  late final _ts_tree_cursor_reset_to = _ts_tree_cursor_reset_toPtr.asFunction<
      void Function(ffi.Pointer<TSTreeCursor>, ffi.Pointer<TSTreeCursor>)>();

  /// Get the tree cursor's current node.
  TSNode ts_tree_cursor_current_node(
    ffi.Pointer<TSTreeCursor> self,
  ) {
    return _ts_tree_cursor_current_node(
      self,
    );
  }

  late final _ts_tree_cursor_current_nodePtr =
      _lookup<ffi.NativeFunction<TSNode Function(ffi.Pointer<TSTreeCursor>)>>(
          'ts_tree_cursor_current_node');
  late final _ts_tree_cursor_current_node = _ts_tree_cursor_current_nodePtr
      .asFunction<TSNode Function(ffi.Pointer<TSTreeCursor>)>();

  /// Get the field name of the tree cursor's current node.
  ///
  /// This returns `NULL` if the current node doesn't have a field.
  /// See also [`ts_node_child_by_field_name`].
  ffi.Pointer<ffi.Char> ts_tree_cursor_current_field_name(
    ffi.Pointer<TSTreeCursor> self,
  ) {
    return _ts_tree_cursor_current_field_name(
      self,
    );
  }

  late final _ts_tree_cursor_current_field_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<TSTreeCursor>)>>('ts_tree_cursor_current_field_name');
  late final _ts_tree_cursor_current_field_name =
      _ts_tree_cursor_current_field_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<TSTreeCursor>)>();

  /// Get the field id of the tree cursor's current node.
  ///
  /// This returns zero if the current node doesn't have a field.
  /// See also [`ts_node_child_by_field_id`], [`ts_language_field_id_for_name`].
  int ts_tree_cursor_current_field_id(
    ffi.Pointer<TSTreeCursor> self,
  ) {
    return _ts_tree_cursor_current_field_id(
      self,
    );
  }

  late final _ts_tree_cursor_current_field_idPtr = _lookup<
          ffi.NativeFunction<ffi.Uint16 Function(ffi.Pointer<TSTreeCursor>)>>(
      'ts_tree_cursor_current_field_id');
  late final _ts_tree_cursor_current_field_id =
      _ts_tree_cursor_current_field_idPtr
          .asFunction<int Function(ffi.Pointer<TSTreeCursor>)>();

  /// Move the cursor to the parent of its current node.
  ///
  /// This returns `true` if the cursor successfully moved, and returns `false`
  /// if there was no parent node (the cursor was already on the root node).
  bool ts_tree_cursor_goto_parent(
    ffi.Pointer<TSTreeCursor> self,
  ) {
    return _ts_tree_cursor_goto_parent(
      self,
    );
  }

  late final _ts_tree_cursor_goto_parentPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<TSTreeCursor>)>>(
          'ts_tree_cursor_goto_parent');
  late final _ts_tree_cursor_goto_parent = _ts_tree_cursor_goto_parentPtr
      .asFunction<bool Function(ffi.Pointer<TSTreeCursor>)>();

  /// Move the cursor to the next sibling of its current node.
  ///
  /// This returns `true` if the cursor successfully moved, and returns `false`
  /// if there was no next sibling node.
  bool ts_tree_cursor_goto_next_sibling(
    ffi.Pointer<TSTreeCursor> self,
  ) {
    return _ts_tree_cursor_goto_next_sibling(
      self,
    );
  }

  late final _ts_tree_cursor_goto_next_siblingPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<TSTreeCursor>)>>(
          'ts_tree_cursor_goto_next_sibling');
  late final _ts_tree_cursor_goto_next_sibling =
      _ts_tree_cursor_goto_next_siblingPtr
          .asFunction<bool Function(ffi.Pointer<TSTreeCursor>)>();

  /// Move the cursor to the previous sibling of its current node.
  ///
  /// This returns `true` if the cursor successfully moved, and returns `false` if
  /// there was no previous sibling node.
  ///
  /// Note, that this function may be slower than
  /// [`ts_tree_cursor_goto_next_sibling`] due to how node positions are stored. In
  /// the worst case, this will need to iterate through all the children upto the
  /// previous sibling node to recalculate its position.
  bool ts_tree_cursor_goto_previous_sibling(
    ffi.Pointer<TSTreeCursor> self,
  ) {
    return _ts_tree_cursor_goto_previous_sibling(
      self,
    );
  }

  late final _ts_tree_cursor_goto_previous_siblingPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<TSTreeCursor>)>>(
          'ts_tree_cursor_goto_previous_sibling');
  late final _ts_tree_cursor_goto_previous_sibling =
      _ts_tree_cursor_goto_previous_siblingPtr
          .asFunction<bool Function(ffi.Pointer<TSTreeCursor>)>();

  /// Move the cursor to the first child of its current node.
  ///
  /// This returns `true` if the cursor successfully moved, and returns `false`
  /// if there were no children.
  bool ts_tree_cursor_goto_first_child(
    ffi.Pointer<TSTreeCursor> self,
  ) {
    return _ts_tree_cursor_goto_first_child(
      self,
    );
  }

  late final _ts_tree_cursor_goto_first_childPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<TSTreeCursor>)>>(
          'ts_tree_cursor_goto_first_child');
  late final _ts_tree_cursor_goto_first_child =
      _ts_tree_cursor_goto_first_childPtr
          .asFunction<bool Function(ffi.Pointer<TSTreeCursor>)>();

  /// Move the cursor to the last child of its current node.
  ///
  /// This returns `true` if the cursor successfully moved, and returns `false` if
  /// there were no children.
  ///
  /// Note that this function may be slower than [`ts_tree_cursor_goto_first_child`]
  /// because it needs to iterate through all the children to compute the child's
  /// position.
  bool ts_tree_cursor_goto_last_child(
    ffi.Pointer<TSTreeCursor> self,
  ) {
    return _ts_tree_cursor_goto_last_child(
      self,
    );
  }

  late final _ts_tree_cursor_goto_last_childPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<TSTreeCursor>)>>(
          'ts_tree_cursor_goto_last_child');
  late final _ts_tree_cursor_goto_last_child =
      _ts_tree_cursor_goto_last_childPtr
          .asFunction<bool Function(ffi.Pointer<TSTreeCursor>)>();

  /// Move the cursor to the node that is the nth descendant of
  /// the original node that the cursor was constructed with, where
  /// zero represents the original node itself.
  void ts_tree_cursor_goto_descendant(
    ffi.Pointer<TSTreeCursor> self,
    int goal_descendant_index,
  ) {
    return _ts_tree_cursor_goto_descendant(
      self,
      goal_descendant_index,
    );
  }

  late final _ts_tree_cursor_goto_descendantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TSTreeCursor>,
              ffi.Uint32)>>('ts_tree_cursor_goto_descendant');
  late final _ts_tree_cursor_goto_descendant =
      _ts_tree_cursor_goto_descendantPtr
          .asFunction<void Function(ffi.Pointer<TSTreeCursor>, int)>();

  /// Get the index of the cursor's current node out of all of the
  /// descendants of the original node that the cursor was constructed with.
  int ts_tree_cursor_current_descendant_index(
    ffi.Pointer<TSTreeCursor> self,
  ) {
    return _ts_tree_cursor_current_descendant_index(
      self,
    );
  }

  late final _ts_tree_cursor_current_descendant_indexPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<TSTreeCursor>)>>(
      'ts_tree_cursor_current_descendant_index');
  late final _ts_tree_cursor_current_descendant_index =
      _ts_tree_cursor_current_descendant_indexPtr
          .asFunction<int Function(ffi.Pointer<TSTreeCursor>)>();

  /// Get the depth of the cursor's current node relative to the original
  /// node that the cursor was constructed with.
  int ts_tree_cursor_current_depth(
    ffi.Pointer<TSTreeCursor> self,
  ) {
    return _ts_tree_cursor_current_depth(
      self,
    );
  }

  late final _ts_tree_cursor_current_depthPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<TSTreeCursor>)>>(
      'ts_tree_cursor_current_depth');
  late final _ts_tree_cursor_current_depth = _ts_tree_cursor_current_depthPtr
      .asFunction<int Function(ffi.Pointer<TSTreeCursor>)>();

  /// Move the cursor to the first child of its current node that extends beyond
  /// the given byte offset or point.
  ///
  /// This returns the index of the child node if one was found, and returns -1
  /// if no such child was found.
  int ts_tree_cursor_goto_first_child_for_byte(
    ffi.Pointer<TSTreeCursor> self,
    int goal_byte,
  ) {
    return _ts_tree_cursor_goto_first_child_for_byte(
      self,
      goal_byte,
    );
  }

  late final _ts_tree_cursor_goto_first_child_for_bytePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<TSTreeCursor>,
              ffi.Uint32)>>('ts_tree_cursor_goto_first_child_for_byte');
  late final _ts_tree_cursor_goto_first_child_for_byte =
      _ts_tree_cursor_goto_first_child_for_bytePtr
          .asFunction<int Function(ffi.Pointer<TSTreeCursor>, int)>();

  int ts_tree_cursor_goto_first_child_for_point(
    ffi.Pointer<TSTreeCursor> self,
    TSPoint goal_point,
  ) {
    return _ts_tree_cursor_goto_first_child_for_point(
      self,
      goal_point,
    );
  }

  late final _ts_tree_cursor_goto_first_child_for_pointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<TSTreeCursor>,
              TSPoint)>>('ts_tree_cursor_goto_first_child_for_point');
  late final _ts_tree_cursor_goto_first_child_for_point =
      _ts_tree_cursor_goto_first_child_for_pointPtr
          .asFunction<int Function(ffi.Pointer<TSTreeCursor>, TSPoint)>();

  TSTreeCursor ts_tree_cursor_copy(
    ffi.Pointer<TSTreeCursor> cursor,
  ) {
    return _ts_tree_cursor_copy(
      cursor,
    );
  }

  late final _ts_tree_cursor_copyPtr = _lookup<
          ffi.NativeFunction<TSTreeCursor Function(ffi.Pointer<TSTreeCursor>)>>(
      'ts_tree_cursor_copy');
  late final _ts_tree_cursor_copy = _ts_tree_cursor_copyPtr
      .asFunction<TSTreeCursor Function(ffi.Pointer<TSTreeCursor>)>();

  /// Create a new query from a string containing one or more S-expression
  /// patterns. The query is associated with a particular language, and can
  /// only be run on syntax nodes parsed with that language.
  ///
  /// If all of the given patterns are valid, this returns a [`TSQuery`].
  /// If a pattern is invalid, this returns `NULL`, and provides two pieces
  /// of information about the problem:
  /// 1. The byte offset of the error is written to the `error_offset` parameter.
  /// 2. The type of error is written to the `error_type` parameter.
  ffi.Pointer<TSQuery> ts_query_new(
    ffi.Pointer<TSLanguage> language,
    ffi.Pointer<ffi.Char> source,
    int source_len,
    ffi.Pointer<ffi.Uint32> error_offset,
    ffi.Pointer<ffi.UnsignedInt> error_type,
  ) {
    return _ts_query_new(
      language,
      source,
      source_len,
      error_offset,
      error_type,
    );
  }

  late final _ts_query_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TSQuery> Function(
              ffi.Pointer<TSLanguage>,
              ffi.Pointer<ffi.Char>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.UnsignedInt>)>>('ts_query_new');
  late final _ts_query_new = _ts_query_newPtr.asFunction<
      ffi.Pointer<TSQuery> Function(
          ffi.Pointer<TSLanguage>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.UnsignedInt>)>();

  /// Delete a query, freeing all of the memory that it used.
  void ts_query_delete(
    ffi.Pointer<TSQuery> self,
  ) {
    return _ts_query_delete(
      self,
    );
  }

  late final _ts_query_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TSQuery>)>>(
          'ts_query_delete');
  late final _ts_query_delete =
      _ts_query_deletePtr.asFunction<void Function(ffi.Pointer<TSQuery>)>();

  /// Get the number of patterns, captures, or string literals in the query.
  int ts_query_pattern_count(
    ffi.Pointer<TSQuery> self,
  ) {
    return _ts_query_pattern_count(
      self,
    );
  }

  late final _ts_query_pattern_countPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<TSQuery>)>>(
          'ts_query_pattern_count');
  late final _ts_query_pattern_count = _ts_query_pattern_countPtr
      .asFunction<int Function(ffi.Pointer<TSQuery>)>();

  int ts_query_capture_count(
    ffi.Pointer<TSQuery> self,
  ) {
    return _ts_query_capture_count(
      self,
    );
  }

  late final _ts_query_capture_countPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<TSQuery>)>>(
          'ts_query_capture_count');
  late final _ts_query_capture_count = _ts_query_capture_countPtr
      .asFunction<int Function(ffi.Pointer<TSQuery>)>();

  int ts_query_string_count(
    ffi.Pointer<TSQuery> self,
  ) {
    return _ts_query_string_count(
      self,
    );
  }

  late final _ts_query_string_countPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<TSQuery>)>>(
          'ts_query_string_count');
  late final _ts_query_string_count = _ts_query_string_countPtr
      .asFunction<int Function(ffi.Pointer<TSQuery>)>();

  /// Get the byte offset where the given pattern starts in the query's source.
  ///
  /// This can be useful when combining queries by concatenating their source
  /// code strings.
  int ts_query_start_byte_for_pattern(
    ffi.Pointer<TSQuery> self,
    int pattern_index,
  ) {
    return _ts_query_start_byte_for_pattern(
      self,
      pattern_index,
    );
  }

  late final _ts_query_start_byte_for_patternPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<TSQuery>,
              ffi.Uint32)>>('ts_query_start_byte_for_pattern');
  late final _ts_query_start_byte_for_pattern =
      _ts_query_start_byte_for_patternPtr
          .asFunction<int Function(ffi.Pointer<TSQuery>, int)>();

  /// Get all of the predicates for the given pattern in the query.
  ///
  /// The predicates are represented as a single array of steps. There are three
  /// types of steps in this array, which correspond to the three legal values for
  /// the `type` field:
  /// - `TSQueryPredicateStepTypeCapture` - Steps with this type represent names
  /// of captures. Their `value_id` can be used with the
  /// [`ts_query_capture_name_for_id`] function to obtain the name of the capture.
  /// - `TSQueryPredicateStepTypeString` - Steps with this type represent literal
  /// strings. Their `value_id` can be used with the
  /// [`ts_query_string_value_for_id`] function to obtain their string value.
  /// - `TSQueryPredicateStepTypeDone` - Steps with this type are *sentinels*
  /// that represent the end of an individual predicate. If a pattern has two
  /// predicates, then there will be two steps with this `type` in the array.
  ffi.Pointer<TSQueryPredicateStep> ts_query_predicates_for_pattern(
    ffi.Pointer<TSQuery> self,
    int pattern_index,
    ffi.Pointer<ffi.Uint32> step_count,
  ) {
    return _ts_query_predicates_for_pattern(
      self,
      pattern_index,
      step_count,
    );
  }

  late final _ts_query_predicates_for_patternPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TSQueryPredicateStep> Function(
              ffi.Pointer<TSQuery>,
              ffi.Uint32,
              ffi.Pointer<ffi.Uint32>)>>('ts_query_predicates_for_pattern');
  late final _ts_query_predicates_for_pattern =
      _ts_query_predicates_for_patternPtr.asFunction<
          ffi.Pointer<TSQueryPredicateStep> Function(
              ffi.Pointer<TSQuery>, int, ffi.Pointer<ffi.Uint32>)>();

  bool ts_query_is_pattern_rooted(
    ffi.Pointer<TSQuery> self,
    int pattern_index,
  ) {
    return _ts_query_is_pattern_rooted(
      self,
      pattern_index,
    );
  }

  late final _ts_query_is_pattern_rootedPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<TSQuery>, ffi.Uint32)>>(
      'ts_query_is_pattern_rooted');
  late final _ts_query_is_pattern_rooted = _ts_query_is_pattern_rootedPtr
      .asFunction<bool Function(ffi.Pointer<TSQuery>, int)>();

  bool ts_query_is_pattern_non_local(
    ffi.Pointer<TSQuery> self,
    int pattern_index,
  ) {
    return _ts_query_is_pattern_non_local(
      self,
      pattern_index,
    );
  }

  late final _ts_query_is_pattern_non_localPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<TSQuery>, ffi.Uint32)>>(
      'ts_query_is_pattern_non_local');
  late final _ts_query_is_pattern_non_local = _ts_query_is_pattern_non_localPtr
      .asFunction<bool Function(ffi.Pointer<TSQuery>, int)>();

  bool ts_query_is_pattern_guaranteed_at_step(
    ffi.Pointer<TSQuery> self,
    int byte_offset,
  ) {
    return _ts_query_is_pattern_guaranteed_at_step(
      self,
      byte_offset,
    );
  }

  late final _ts_query_is_pattern_guaranteed_at_stepPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<TSQuery>, ffi.Uint32)>>(
      'ts_query_is_pattern_guaranteed_at_step');
  late final _ts_query_is_pattern_guaranteed_at_step =
      _ts_query_is_pattern_guaranteed_at_stepPtr
          .asFunction<bool Function(ffi.Pointer<TSQuery>, int)>();

  /// Get the name and length of one of the query's captures, or one of the
  /// query's string literals. Each capture and string is associated with a
  /// numeric id based on the order that it appeared in the query's source.
  ffi.Pointer<ffi.Char> ts_query_capture_name_for_id(
    ffi.Pointer<TSQuery> self,
    int index,
    ffi.Pointer<ffi.Uint32> length,
  ) {
    return _ts_query_capture_name_for_id(
      self,
      index,
      length,
    );
  }

  late final _ts_query_capture_name_for_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<TSQuery>, ffi.Uint32,
              ffi.Pointer<ffi.Uint32>)>>('ts_query_capture_name_for_id');
  late final _ts_query_capture_name_for_id =
      _ts_query_capture_name_for_idPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<TSQuery>, int, ffi.Pointer<ffi.Uint32>)>();

  /// Get the quantifier of the query's captures. Each capture is * associated
  /// with a numeric id based on the order that it appeared in the query's source.
  TSQuantifier ts_query_capture_quantifier_for_id(
    ffi.Pointer<TSQuery> self,
    int pattern_index,
    int capture_index,
  ) {
    return TSQuantifier.fromValue(_ts_query_capture_quantifier_for_id(
      self,
      pattern_index,
      capture_index,
    ));
  }

  late final _ts_query_capture_quantifier_for_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<TSQuery>, ffi.Uint32,
              ffi.Uint32)>>('ts_query_capture_quantifier_for_id');
  late final _ts_query_capture_quantifier_for_id =
      _ts_query_capture_quantifier_for_idPtr
          .asFunction<int Function(ffi.Pointer<TSQuery>, int, int)>();

  ffi.Pointer<ffi.Char> ts_query_string_value_for_id(
    ffi.Pointer<TSQuery> self,
    int index,
    ffi.Pointer<ffi.Uint32> length,
  ) {
    return _ts_query_string_value_for_id(
      self,
      index,
      length,
    );
  }

  late final _ts_query_string_value_for_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<TSQuery>, ffi.Uint32,
              ffi.Pointer<ffi.Uint32>)>>('ts_query_string_value_for_id');
  late final _ts_query_string_value_for_id =
      _ts_query_string_value_for_idPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<TSQuery>, int, ffi.Pointer<ffi.Uint32>)>();

  /// Disable a certain capture within a query.
  ///
  /// This prevents the capture from being returned in matches, and also avoids
  /// any resource usage associated with recording the capture. Currently, there
  /// is no way to undo this.
  void ts_query_disable_capture(
    ffi.Pointer<TSQuery> self,
    ffi.Pointer<ffi.Char> name,
    int length,
  ) {
    return _ts_query_disable_capture(
      self,
      name,
      length,
    );
  }

  late final _ts_query_disable_capturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TSQuery>, ffi.Pointer<ffi.Char>,
              ffi.Uint32)>>('ts_query_disable_capture');
  late final _ts_query_disable_capture =
      _ts_query_disable_capturePtr.asFunction<
          void Function(ffi.Pointer<TSQuery>, ffi.Pointer<ffi.Char>, int)>();

  /// Disable a certain pattern within a query.
  ///
  /// This prevents the pattern from matching and removes most of the overhead
  /// associated with the pattern. Currently, there is no way to undo this.
  void ts_query_disable_pattern(
    ffi.Pointer<TSQuery> self,
    int pattern_index,
  ) {
    return _ts_query_disable_pattern(
      self,
      pattern_index,
    );
  }

  late final _ts_query_disable_patternPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<TSQuery>, ffi.Uint32)>>(
      'ts_query_disable_pattern');
  late final _ts_query_disable_pattern = _ts_query_disable_patternPtr
      .asFunction<void Function(ffi.Pointer<TSQuery>, int)>();

  /// Create a new cursor for executing a given query.
  ///
  /// The cursor stores the state that is needed to iteratively search
  /// for matches. To use the query cursor, first call [`ts_query_cursor_exec`]
  /// to start running a given query on a given syntax node. Then, there are
  /// two options for consuming the results of the query:
  /// 1. Repeatedly call [`ts_query_cursor_next_match`] to iterate over all of the
  /// *matches* in the order that they were found. Each match contains the
  /// index of the pattern that matched, and an array of captures. Because
  /// multiple patterns can match the same set of nodes, one match may contain
  /// captures that appear *before* some of the captures from a previous match.
  /// 2. Repeatedly call [`ts_query_cursor_next_capture`] to iterate over all of the
  /// individual *captures* in the order that they appear. This is useful if
  /// don't care about which pattern matched, and just want a single ordered
  /// sequence of captures.
  ///
  /// If you don't care about consuming all of the results, you can stop calling
  /// [`ts_query_cursor_next_match`] or [`ts_query_cursor_next_capture`] at any point.
  /// You can then start executing another query on another node by calling
  /// [`ts_query_cursor_exec`] again.
  ffi.Pointer<TSQueryCursor> ts_query_cursor_new() {
    return _ts_query_cursor_new();
  }

  late final _ts_query_cursor_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<TSQueryCursor> Function()>>(
          'ts_query_cursor_new');
  late final _ts_query_cursor_new = _ts_query_cursor_newPtr
      .asFunction<ffi.Pointer<TSQueryCursor> Function()>();

  /// Delete a query cursor, freeing all of the memory that it used.
  void ts_query_cursor_delete(
    ffi.Pointer<TSQueryCursor> self,
  ) {
    return _ts_query_cursor_delete(
      self,
    );
  }

  late final _ts_query_cursor_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TSQueryCursor>)>>(
      'ts_query_cursor_delete');
  late final _ts_query_cursor_delete = _ts_query_cursor_deletePtr
      .asFunction<void Function(ffi.Pointer<TSQueryCursor>)>();

  /// Start running a given query on a given node.
  void ts_query_cursor_exec(
    ffi.Pointer<TSQueryCursor> self,
    ffi.Pointer<TSQuery> query,
    TSNode node,
  ) {
    return _ts_query_cursor_exec(
      self,
      query,
      node,
    );
  }

  late final _ts_query_cursor_execPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TSQueryCursor>, ffi.Pointer<TSQuery>,
              TSNode)>>('ts_query_cursor_exec');
  late final _ts_query_cursor_exec = _ts_query_cursor_execPtr.asFunction<
      void Function(
          ffi.Pointer<TSQueryCursor>, ffi.Pointer<TSQuery>, TSNode)>();

  /// Manage the maximum number of in-progress matches allowed by this query
  /// cursor.
  ///
  /// Query cursors have an optional maximum capacity for storing lists of
  /// in-progress captures. If this capacity is exceeded, then the
  /// earliest-starting match will silently be dropped to make room for further
  /// matches. This maximum capacity is optional — by default, query cursors allow
  /// any number of pending matches, dynamically allocating new space for them as
  /// needed as the query is executed.
  bool ts_query_cursor_did_exceed_match_limit(
    ffi.Pointer<TSQueryCursor> self,
  ) {
    return _ts_query_cursor_did_exceed_match_limit(
      self,
    );
  }

  late final _ts_query_cursor_did_exceed_match_limitPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<TSQueryCursor>)>>(
      'ts_query_cursor_did_exceed_match_limit');
  late final _ts_query_cursor_did_exceed_match_limit =
      _ts_query_cursor_did_exceed_match_limitPtr
          .asFunction<bool Function(ffi.Pointer<TSQueryCursor>)>();

  int ts_query_cursor_match_limit(
    ffi.Pointer<TSQueryCursor> self,
  ) {
    return _ts_query_cursor_match_limit(
      self,
    );
  }

  late final _ts_query_cursor_match_limitPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<TSQueryCursor>)>>(
      'ts_query_cursor_match_limit');
  late final _ts_query_cursor_match_limit = _ts_query_cursor_match_limitPtr
      .asFunction<int Function(ffi.Pointer<TSQueryCursor>)>();

  void ts_query_cursor_set_match_limit(
    ffi.Pointer<TSQueryCursor> self,
    int limit,
  ) {
    return _ts_query_cursor_set_match_limit(
      self,
      limit,
    );
  }

  late final _ts_query_cursor_set_match_limitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TSQueryCursor>,
              ffi.Uint32)>>('ts_query_cursor_set_match_limit');
  late final _ts_query_cursor_set_match_limit =
      _ts_query_cursor_set_match_limitPtr
          .asFunction<void Function(ffi.Pointer<TSQueryCursor>, int)>();

  /// Set the range of bytes or (row, column) positions in which the query
  /// will be executed.
  void ts_query_cursor_set_byte_range(
    ffi.Pointer<TSQueryCursor> self,
    int start_byte,
    int end_byte,
  ) {
    return _ts_query_cursor_set_byte_range(
      self,
      start_byte,
      end_byte,
    );
  }

  late final _ts_query_cursor_set_byte_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TSQueryCursor>, ffi.Uint32,
              ffi.Uint32)>>('ts_query_cursor_set_byte_range');
  late final _ts_query_cursor_set_byte_range =
      _ts_query_cursor_set_byte_rangePtr
          .asFunction<void Function(ffi.Pointer<TSQueryCursor>, int, int)>();

  void ts_query_cursor_set_point_range(
    ffi.Pointer<TSQueryCursor> self,
    TSPoint start_point,
    TSPoint end_point,
  ) {
    return _ts_query_cursor_set_point_range(
      self,
      start_point,
      end_point,
    );
  }

  late final _ts_query_cursor_set_point_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TSQueryCursor>, TSPoint,
              TSPoint)>>('ts_query_cursor_set_point_range');
  late final _ts_query_cursor_set_point_range =
      _ts_query_cursor_set_point_rangePtr.asFunction<
          void Function(ffi.Pointer<TSQueryCursor>, TSPoint, TSPoint)>();

  /// Advance to the next match of the currently running query.
  ///
  /// If there is a match, write it to `*match` and return `true`.
  /// Otherwise, return `false`.
  bool ts_query_cursor_next_match(
    ffi.Pointer<TSQueryCursor> self,
    ffi.Pointer<TSQueryMatch> match,
  ) {
    return _ts_query_cursor_next_match(
      self,
      match,
    );
  }

  late final _ts_query_cursor_next_matchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<TSQueryCursor>,
              ffi.Pointer<TSQueryMatch>)>>('ts_query_cursor_next_match');
  late final _ts_query_cursor_next_match =
      _ts_query_cursor_next_matchPtr.asFunction<
          bool Function(
              ffi.Pointer<TSQueryCursor>, ffi.Pointer<TSQueryMatch>)>();

  void ts_query_cursor_remove_match(
    ffi.Pointer<TSQueryCursor> self,
    int match_id,
  ) {
    return _ts_query_cursor_remove_match(
      self,
      match_id,
    );
  }

  late final _ts_query_cursor_remove_matchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TSQueryCursor>,
              ffi.Uint32)>>('ts_query_cursor_remove_match');
  late final _ts_query_cursor_remove_match = _ts_query_cursor_remove_matchPtr
      .asFunction<void Function(ffi.Pointer<TSQueryCursor>, int)>();

  /// Advance to the next capture of the currently running query.
  ///
  /// If there is a capture, write its match to `*match` and its index within
  /// the matche's capture list to `*capture_index`. Otherwise, return `false`.
  bool ts_query_cursor_next_capture(
    ffi.Pointer<TSQueryCursor> self,
    ffi.Pointer<TSQueryMatch> match,
    ffi.Pointer<ffi.Uint32> capture_index,
  ) {
    return _ts_query_cursor_next_capture(
      self,
      match,
      capture_index,
    );
  }

  late final _ts_query_cursor_next_capturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<TSQueryCursor>,
              ffi.Pointer<TSQueryMatch>,
              ffi.Pointer<ffi.Uint32>)>>('ts_query_cursor_next_capture');
  late final _ts_query_cursor_next_capture =
      _ts_query_cursor_next_capturePtr.asFunction<
          bool Function(ffi.Pointer<TSQueryCursor>, ffi.Pointer<TSQueryMatch>,
              ffi.Pointer<ffi.Uint32>)>();

  /// Set the maximum start depth for a query cursor.
  ///
  /// This prevents cursors from exploring children nodes at a certain depth.
  /// Note if a pattern includes many children, then they will still be checked.
  ///
  /// The zero max start depth value can be used as a special behavior and
  /// it helps to destructure a subtree by staying on a node and using captures
  /// for interested parts. Note that the zero max start depth only limit a search
  /// depth for a pattern's root node but other nodes that are parts of the pattern
  /// may be searched at any depth what defined by the pattern structure.
  ///
  /// Set to `UINT32_MAX` to remove the maximum start depth.
  void ts_query_cursor_set_max_start_depth(
    ffi.Pointer<TSQueryCursor> self,
    int max_start_depth,
  ) {
    return _ts_query_cursor_set_max_start_depth(
      self,
      max_start_depth,
    );
  }

  late final _ts_query_cursor_set_max_start_depthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TSQueryCursor>,
              ffi.Uint32)>>('ts_query_cursor_set_max_start_depth');
  late final _ts_query_cursor_set_max_start_depth =
      _ts_query_cursor_set_max_start_depthPtr
          .asFunction<void Function(ffi.Pointer<TSQueryCursor>, int)>();

  /// Get another reference to the given language.
  ffi.Pointer<TSLanguage> ts_language_copy(
    ffi.Pointer<TSLanguage> self,
  ) {
    return _ts_language_copy(
      self,
    );
  }

  late final _ts_language_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TSLanguage> Function(
              ffi.Pointer<TSLanguage>)>>('ts_language_copy');
  late final _ts_language_copy = _ts_language_copyPtr
      .asFunction<ffi.Pointer<TSLanguage> Function(ffi.Pointer<TSLanguage>)>();

  /// Free any dynamically-allocated resources for this language, if
  /// this is the last reference.
  void ts_language_delete(
    ffi.Pointer<TSLanguage> self,
  ) {
    return _ts_language_delete(
      self,
    );
  }

  late final _ts_language_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TSLanguage>)>>(
          'ts_language_delete');
  late final _ts_language_delete = _ts_language_deletePtr
      .asFunction<void Function(ffi.Pointer<TSLanguage>)>();

  /// Get the number of distinct node types in the language.
  int ts_language_symbol_count(
    ffi.Pointer<TSLanguage> self,
  ) {
    return _ts_language_symbol_count(
      self,
    );
  }

  late final _ts_language_symbol_countPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<TSLanguage>)>>(
          'ts_language_symbol_count');
  late final _ts_language_symbol_count = _ts_language_symbol_countPtr
      .asFunction<int Function(ffi.Pointer<TSLanguage>)>();

  /// Get the number of valid states in this language.
  int ts_language_state_count(
    ffi.Pointer<TSLanguage> self,
  ) {
    return _ts_language_state_count(
      self,
    );
  }

  late final _ts_language_state_countPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<TSLanguage>)>>(
          'ts_language_state_count');
  late final _ts_language_state_count = _ts_language_state_countPtr
      .asFunction<int Function(ffi.Pointer<TSLanguage>)>();

  /// Get a node type string for the given numerical id.
  ffi.Pointer<ffi.Char> ts_language_symbol_name(
    ffi.Pointer<TSLanguage> self,
    int symbol,
  ) {
    return _ts_language_symbol_name(
      self,
      symbol,
    );
  }

  late final _ts_language_symbol_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<TSLanguage>, ffi.Uint16)>>('ts_language_symbol_name');
  late final _ts_language_symbol_name = _ts_language_symbol_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<TSLanguage>, int)>();

  /// Get the numerical id for the given node type string.
  int ts_language_symbol_for_name(
    ffi.Pointer<TSLanguage> self,
    ffi.Pointer<ffi.Char> string,
    int length,
    bool is_named,
  ) {
    return _ts_language_symbol_for_name(
      self,
      string,
      length,
      is_named,
    );
  }

  late final _ts_language_symbol_for_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint16 Function(ffi.Pointer<TSLanguage>, ffi.Pointer<ffi.Char>,
              ffi.Uint32, ffi.Bool)>>('ts_language_symbol_for_name');
  late final _ts_language_symbol_for_name =
      _ts_language_symbol_for_namePtr.asFunction<
          int Function(
              ffi.Pointer<TSLanguage>, ffi.Pointer<ffi.Char>, int, bool)>();

  /// Get the number of distinct field names in the language.
  int ts_language_field_count(
    ffi.Pointer<TSLanguage> self,
  ) {
    return _ts_language_field_count(
      self,
    );
  }

  late final _ts_language_field_countPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<TSLanguage>)>>(
          'ts_language_field_count');
  late final _ts_language_field_count = _ts_language_field_countPtr
      .asFunction<int Function(ffi.Pointer<TSLanguage>)>();

  /// Get the field name string for the given numerical id.
  ffi.Pointer<ffi.Char> ts_language_field_name_for_id(
    ffi.Pointer<TSLanguage> self,
    int id,
  ) {
    return _ts_language_field_name_for_id(
      self,
      id,
    );
  }

  late final _ts_language_field_name_for_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<TSLanguage>,
              ffi.Uint16)>>('ts_language_field_name_for_id');
  late final _ts_language_field_name_for_id =
      _ts_language_field_name_for_idPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<TSLanguage>, int)>();

  /// Get the numerical id for the given field name string.
  int ts_language_field_id_for_name(
    ffi.Pointer<TSLanguage> self,
    ffi.Pointer<ffi.Char> name,
    int name_length,
  ) {
    return _ts_language_field_id_for_name(
      self,
      name,
      name_length,
    );
  }

  late final _ts_language_field_id_for_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint16 Function(ffi.Pointer<TSLanguage>, ffi.Pointer<ffi.Char>,
              ffi.Uint32)>>('ts_language_field_id_for_name');
  late final _ts_language_field_id_for_name =
      _ts_language_field_id_for_namePtr.asFunction<
          int Function(ffi.Pointer<TSLanguage>, ffi.Pointer<ffi.Char>, int)>();

  /// Check whether the given node type id belongs to named nodes, anonymous nodes,
  /// or a hidden nodes.
  ///
  /// See also [`ts_node_is_named`]. Hidden nodes are never returned from the API.
  TSSymbolType ts_language_symbol_type(
    ffi.Pointer<TSLanguage> self,
    int symbol,
  ) {
    return TSSymbolType.fromValue(_ts_language_symbol_type(
      self,
      symbol,
    ));
  }

  late final _ts_language_symbol_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<TSLanguage>, ffi.Uint16)>>('ts_language_symbol_type');
  late final _ts_language_symbol_type = _ts_language_symbol_typePtr
      .asFunction<int Function(ffi.Pointer<TSLanguage>, int)>();

  /// Get the ABI version number for this language. This version number is used
  /// to ensure that languages were generated by a compatible version of
  /// Tree-sitter.
  ///
  /// See also [`ts_parser_set_language`].
  int ts_language_version(
    ffi.Pointer<TSLanguage> self,
  ) {
    return _ts_language_version(
      self,
    );
  }

  late final _ts_language_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<TSLanguage>)>>(
          'ts_language_version');
  late final _ts_language_version = _ts_language_versionPtr
      .asFunction<int Function(ffi.Pointer<TSLanguage>)>();

  /// Get the next parse state. Combine this with lookahead iterators to generate
  /// completion suggestions or valid symbols in error nodes. Use
  /// [`ts_node_grammar_symbol`] for valid symbols.
  int ts_language_next_state(
    ffi.Pointer<TSLanguage> self,
    int state,
    int symbol,
  ) {
    return _ts_language_next_state(
      self,
      state,
      symbol,
    );
  }

  late final _ts_language_next_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint16 Function(ffi.Pointer<TSLanguage>, ffi.Uint16,
              ffi.Uint16)>>('ts_language_next_state');
  late final _ts_language_next_state = _ts_language_next_statePtr
      .asFunction<int Function(ffi.Pointer<TSLanguage>, int, int)>();

  /// Create a new lookahead iterator for the given language and parse state.
  ///
  /// This returns `NULL` if state is invalid for the language.
  ///
  /// Repeatedly using [`ts_lookahead_iterator_next`] and
  /// [`ts_lookahead_iterator_current_symbol`] will generate valid symbols in the
  /// given parse state. Newly created lookahead iterators will contain the `ERROR`
  /// symbol.
  ///
  /// Lookahead iterators can be useful to generate suggestions and improve syntax
  /// error diagnostics. To get symbols valid in an ERROR node, use the lookahead
  /// iterator on its first leaf node state. For `MISSING` nodes, a lookahead
  /// iterator created on the previous non-extra leaf node may be appropriate.
  ffi.Pointer<TSLookaheadIterator> ts_lookahead_iterator_new(
    ffi.Pointer<TSLanguage> self,
    int state,
  ) {
    return _ts_lookahead_iterator_new(
      self,
      state,
    );
  }

  late final _ts_lookahead_iterator_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TSLookaheadIterator> Function(ffi.Pointer<TSLanguage>,
              ffi.Uint16)>>('ts_lookahead_iterator_new');
  late final _ts_lookahead_iterator_new =
      _ts_lookahead_iterator_newPtr.asFunction<
          ffi.Pointer<TSLookaheadIterator> Function(
              ffi.Pointer<TSLanguage>, int)>();

  /// Delete a lookahead iterator freeing all the memory used.
  void ts_lookahead_iterator_delete(
    ffi.Pointer<TSLookaheadIterator> self,
  ) {
    return _ts_lookahead_iterator_delete(
      self,
    );
  }

  late final _ts_lookahead_iterator_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<TSLookaheadIterator>)>>(
      'ts_lookahead_iterator_delete');
  late final _ts_lookahead_iterator_delete = _ts_lookahead_iterator_deletePtr
      .asFunction<void Function(ffi.Pointer<TSLookaheadIterator>)>();

  /// Reset the lookahead iterator to another state.
  ///
  /// This returns `true` if the iterator was reset to the given state and `false`
  /// otherwise.
  bool ts_lookahead_iterator_reset_state(
    ffi.Pointer<TSLookaheadIterator> self,
    int state,
  ) {
    return _ts_lookahead_iterator_reset_state(
      self,
      state,
    );
  }

  late final _ts_lookahead_iterator_reset_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<TSLookaheadIterator>,
              ffi.Uint16)>>('ts_lookahead_iterator_reset_state');
  late final _ts_lookahead_iterator_reset_state =
      _ts_lookahead_iterator_reset_statePtr
          .asFunction<bool Function(ffi.Pointer<TSLookaheadIterator>, int)>();

  /// Reset the lookahead iterator.
  ///
  /// This returns `true` if the language was set successfully and `false`
  /// otherwise.
  bool ts_lookahead_iterator_reset(
    ffi.Pointer<TSLookaheadIterator> self,
    ffi.Pointer<TSLanguage> language,
    int state,
  ) {
    return _ts_lookahead_iterator_reset(
      self,
      language,
      state,
    );
  }

  late final _ts_lookahead_iterator_resetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<TSLookaheadIterator>,
              ffi.Pointer<TSLanguage>,
              ffi.Uint16)>>('ts_lookahead_iterator_reset');
  late final _ts_lookahead_iterator_reset =
      _ts_lookahead_iterator_resetPtr.asFunction<
          bool Function(ffi.Pointer<TSLookaheadIterator>,
              ffi.Pointer<TSLanguage>, int)>();

  /// Get the current language of the lookahead iterator.
  ffi.Pointer<TSLanguage> ts_lookahead_iterator_language(
    ffi.Pointer<TSLookaheadIterator> self,
  ) {
    return _ts_lookahead_iterator_language(
      self,
    );
  }

  late final _ts_lookahead_iterator_languagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<TSLanguage> Function(
                  ffi.Pointer<TSLookaheadIterator>)>>(
      'ts_lookahead_iterator_language');
  late final _ts_lookahead_iterator_language =
      _ts_lookahead_iterator_languagePtr.asFunction<
          ffi.Pointer<TSLanguage> Function(ffi.Pointer<TSLookaheadIterator>)>();

  /// Advance the lookahead iterator to the next symbol.
  ///
  /// This returns `true` if there is a new symbol and `false` otherwise.
  bool ts_lookahead_iterator_next(
    ffi.Pointer<TSLookaheadIterator> self,
  ) {
    return _ts_lookahead_iterator_next(
      self,
    );
  }

  late final _ts_lookahead_iterator_nextPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<TSLookaheadIterator>)>>(
      'ts_lookahead_iterator_next');
  late final _ts_lookahead_iterator_next = _ts_lookahead_iterator_nextPtr
      .asFunction<bool Function(ffi.Pointer<TSLookaheadIterator>)>();

  /// Get the current symbol of the lookahead iterator;
  int ts_lookahead_iterator_current_symbol(
    ffi.Pointer<TSLookaheadIterator> self,
  ) {
    return _ts_lookahead_iterator_current_symbol(
      self,
    );
  }

  late final _ts_lookahead_iterator_current_symbolPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint16 Function(ffi.Pointer<TSLookaheadIterator>)>>(
      'ts_lookahead_iterator_current_symbol');
  late final _ts_lookahead_iterator_current_symbol =
      _ts_lookahead_iterator_current_symbolPtr
          .asFunction<int Function(ffi.Pointer<TSLookaheadIterator>)>();

  /// Get the current symbol type of the lookahead iterator as a null terminated
  /// string.
  ffi.Pointer<ffi.Char> ts_lookahead_iterator_current_symbol_name(
    ffi.Pointer<TSLookaheadIterator> self,
  ) {
    return _ts_lookahead_iterator_current_symbol_name(
      self,
    );
  }

  late final _ts_lookahead_iterator_current_symbol_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<TSLookaheadIterator>)>>(
      'ts_lookahead_iterator_current_symbol_name');
  late final _ts_lookahead_iterator_current_symbol_name =
      _ts_lookahead_iterator_current_symbol_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<TSLookaheadIterator>)>();

  /// Create a Wasm store.
  ffi.Pointer<TSWasmStore> ts_wasm_store_new(
    ffi.Pointer<wasm_engine_t> engine,
    ffi.Pointer<TSWasmError> error,
  ) {
    return _ts_wasm_store_new(
      engine,
      error,
    );
  }

  late final _ts_wasm_store_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TSWasmStore> Function(ffi.Pointer<wasm_engine_t>,
              ffi.Pointer<TSWasmError>)>>('ts_wasm_store_new');
  late final _ts_wasm_store_new = _ts_wasm_store_newPtr.asFunction<
      ffi.Pointer<TSWasmStore> Function(
          ffi.Pointer<wasm_engine_t>, ffi.Pointer<TSWasmError>)>();

  /// Free the memory associated with the given Wasm store.
  void ts_wasm_store_delete(
    ffi.Pointer<TSWasmStore> arg0,
  ) {
    return _ts_wasm_store_delete(
      arg0,
    );
  }

  late final _ts_wasm_store_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TSWasmStore>)>>(
          'ts_wasm_store_delete');
  late final _ts_wasm_store_delete = _ts_wasm_store_deletePtr
      .asFunction<void Function(ffi.Pointer<TSWasmStore>)>();

  /// Create a language from a buffer of Wasm. The resulting language behaves
  /// like any other Tree-sitter language, except that in order to use it with
  /// a parser, that parser must have a Wasm store. Note that the language
  /// can be used with any Wasm store, it doesn't need to be the same store that
  /// was used to originally load it.
  ffi.Pointer<TSLanguage> ts_wasm_store_load_language(
    ffi.Pointer<TSWasmStore> arg0,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> wasm,
    int wasm_len,
    ffi.Pointer<TSWasmError> error,
  ) {
    return _ts_wasm_store_load_language(
      arg0,
      name,
      wasm,
      wasm_len,
      error,
    );
  }

  late final _ts_wasm_store_load_languagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TSLanguage> Function(
              ffi.Pointer<TSWasmStore>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Uint32,
              ffi.Pointer<TSWasmError>)>>('ts_wasm_store_load_language');
  late final _ts_wasm_store_load_language =
      _ts_wasm_store_load_languagePtr.asFunction<
          ffi.Pointer<TSLanguage> Function(
              ffi.Pointer<TSWasmStore>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<TSWasmError>)>();

  /// Get the number of languages instantiated in the given wasm store.
  int ts_wasm_store_language_count(
    ffi.Pointer<TSWasmStore> arg0,
  ) {
    return _ts_wasm_store_language_count(
      arg0,
    );
  }

  late final _ts_wasm_store_language_countPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<TSWasmStore>)>>(
          'ts_wasm_store_language_count');
  late final _ts_wasm_store_language_count = _ts_wasm_store_language_countPtr
      .asFunction<int Function(ffi.Pointer<TSWasmStore>)>();

  /// Check if the language came from a Wasm module. If so, then in order to use
  /// this language with a Parser, that parser must have a Wasm store assigned.
  bool ts_language_is_wasm(
    ffi.Pointer<TSLanguage> arg0,
  ) {
    return _ts_language_is_wasm(
      arg0,
    );
  }

  late final _ts_language_is_wasmPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<TSLanguage>)>>(
          'ts_language_is_wasm');
  late final _ts_language_is_wasm = _ts_language_is_wasmPtr
      .asFunction<bool Function(ffi.Pointer<TSLanguage>)>();

  /// Assign the given Wasm store to the parser. A parser must have a Wasm store
  /// in order to use Wasm languages.
  void ts_parser_set_wasm_store(
    ffi.Pointer<TSParser> arg0,
    ffi.Pointer<TSWasmStore> arg1,
  ) {
    return _ts_parser_set_wasm_store(
      arg0,
      arg1,
    );
  }

  late final _ts_parser_set_wasm_storePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TSParser>,
              ffi.Pointer<TSWasmStore>)>>('ts_parser_set_wasm_store');
  late final _ts_parser_set_wasm_store =
      _ts_parser_set_wasm_storePtr.asFunction<
          void Function(ffi.Pointer<TSParser>, ffi.Pointer<TSWasmStore>)>();

  /// Remove the parser's current Wasm store and return it. This returns NULL if
  /// the parser doesn't have a Wasm store.
  ffi.Pointer<TSWasmStore> ts_parser_take_wasm_store(
    ffi.Pointer<TSParser> arg0,
  ) {
    return _ts_parser_take_wasm_store(
      arg0,
    );
  }

  late final _ts_parser_take_wasm_storePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TSWasmStore> Function(
              ffi.Pointer<TSParser>)>>('ts_parser_take_wasm_store');
  late final _ts_parser_take_wasm_store = _ts_parser_take_wasm_storePtr
      .asFunction<ffi.Pointer<TSWasmStore> Function(ffi.Pointer<TSParser>)>();

  /// Set the allocation functions used by the library.
  ///
  /// By default, Tree-sitter uses the standard libc allocation functions,
  /// but aborts the process when an allocation fails. This function lets
  /// you supply alternative allocation functions at runtime.
  ///
  /// If you pass `NULL` for any parameter, Tree-sitter will switch back to
  /// its default implementation of that function.
  ///
  /// If you call this function after the library has already been used, then
  /// you must ensure that either:
  /// 1. All the existing objects have been freed.
  /// 2. The new allocator shares its state with the old one, so it is capable
  /// of freeing memory that was allocated by the old allocator.
  void ts_set_allocator(
    ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>
        new_malloc,
    ffi.Pointer<
            ffi
            .NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>
        new_calloc,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(
                    ffi.Pointer<ffi.Void>, ffi.Size)>>
        new_realloc,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        new_free,
  ) {
    return _ts_set_allocator(
      new_malloc,
      new_calloc,
      new_realloc,
      new_free,
    );
  }

  late final _ts_set_allocatorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(
                          ffi.Pointer<ffi.Void>, ffi.Size)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('ts_set_allocator');
  late final _ts_set_allocator = _ts_set_allocatorPtr.asFunction<
      void Function(
          ffi.Pointer<
              ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(
                      ffi.Pointer<ffi.Void>, ffi.Size)>>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<ffi.Void> ts_malloc_default(
    int size,
  ) {
    return _ts_malloc_default(
      size,
    );
  }

  late final _ts_malloc_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'ts_malloc_default');
  late final _ts_malloc_default =
      _ts_malloc_defaultPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> ts_calloc_default(
    int count,
    int size,
  ) {
    return _ts_calloc_default(
      count,
      size,
    );
  }

  late final _ts_calloc_defaultPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>(
      'ts_calloc_default');
  late final _ts_calloc_default = _ts_calloc_defaultPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> ts_realloc_default(
    ffi.Pointer<ffi.Void> buffer,
    int size,
  ) {
    return _ts_realloc_default(
      buffer,
      size,
    );
  }

  late final _ts_realloc_defaultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('ts_realloc_default');
  late final _ts_realloc_default = _ts_realloc_defaultPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void ts_external_scanner_state_init(
    ffi.Pointer<ExternalScannerState> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _ts_external_scanner_state_init(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ts_external_scanner_state_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ExternalScannerState>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('ts_external_scanner_state_init');
  late final _ts_external_scanner_state_init =
      _ts_external_scanner_state_initPtr.asFunction<
          void Function(
              ffi.Pointer<ExternalScannerState>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> ts_external_scanner_state_data(
    ffi.Pointer<ExternalScannerState> arg0,
  ) {
    return _ts_external_scanner_state_data(
      arg0,
    );
  }

  late final _ts_external_scanner_state_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<ExternalScannerState>)>>(
      'ts_external_scanner_state_data');
  late final _ts_external_scanner_state_data =
      _ts_external_scanner_state_dataPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ExternalScannerState>)>();

  bool ts_external_scanner_state_eq(
    ffi.Pointer<ExternalScannerState> self,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _ts_external_scanner_state_eq(
      self,
      arg1,
      arg2,
    );
  }

  late final _ts_external_scanner_state_eqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ExternalScannerState>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('ts_external_scanner_state_eq');
  late final _ts_external_scanner_state_eq =
      _ts_external_scanner_state_eqPtr.asFunction<
          bool Function(
              ffi.Pointer<ExternalScannerState>, ffi.Pointer<ffi.Char>, int)>();

  void ts_external_scanner_state_delete(
    ffi.Pointer<ExternalScannerState> self,
  ) {
    return _ts_external_scanner_state_delete(
      self,
    );
  }

  late final _ts_external_scanner_state_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ExternalScannerState>)>>(
      'ts_external_scanner_state_delete');
  late final _ts_external_scanner_state_delete =
      _ts_external_scanner_state_deletePtr
          .asFunction<void Function(ffi.Pointer<ExternalScannerState>)>();

  void ts_subtree_array_copy(
    SubtreeArray arg0,
    ffi.Pointer<SubtreeArray> arg1,
  ) {
    return _ts_subtree_array_copy(
      arg0,
      arg1,
    );
  }

  late final _ts_subtree_array_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(SubtreeArray,
              ffi.Pointer<SubtreeArray>)>>('ts_subtree_array_copy');
  late final _ts_subtree_array_copy = _ts_subtree_array_copyPtr
      .asFunction<void Function(SubtreeArray, ffi.Pointer<SubtreeArray>)>();

  void ts_subtree_array_clear(
    ffi.Pointer<SubtreePool> arg0,
    ffi.Pointer<SubtreeArray> arg1,
  ) {
    return _ts_subtree_array_clear(
      arg0,
      arg1,
    );
  }

  late final _ts_subtree_array_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<SubtreePool>,
              ffi.Pointer<SubtreeArray>)>>('ts_subtree_array_clear');
  late final _ts_subtree_array_clear = _ts_subtree_array_clearPtr.asFunction<
      void Function(ffi.Pointer<SubtreePool>, ffi.Pointer<SubtreeArray>)>();

  void ts_subtree_array_delete(
    ffi.Pointer<SubtreePool> arg0,
    ffi.Pointer<SubtreeArray> arg1,
  ) {
    return _ts_subtree_array_delete(
      arg0,
      arg1,
    );
  }

  late final _ts_subtree_array_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<SubtreePool>,
              ffi.Pointer<SubtreeArray>)>>('ts_subtree_array_delete');
  late final _ts_subtree_array_delete = _ts_subtree_array_deletePtr.asFunction<
      void Function(ffi.Pointer<SubtreePool>, ffi.Pointer<SubtreeArray>)>();

  void ts_subtree_array_remove_trailing_extras(
    ffi.Pointer<SubtreeArray> arg0,
    ffi.Pointer<SubtreeArray> arg1,
  ) {
    return _ts_subtree_array_remove_trailing_extras(
      arg0,
      arg1,
    );
  }

  late final _ts_subtree_array_remove_trailing_extrasPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<SubtreeArray>, ffi.Pointer<SubtreeArray>)>>(
      'ts_subtree_array_remove_trailing_extras');
  late final _ts_subtree_array_remove_trailing_extras =
      _ts_subtree_array_remove_trailing_extrasPtr.asFunction<
          void Function(
              ffi.Pointer<SubtreeArray>, ffi.Pointer<SubtreeArray>)>();

  void ts_subtree_array_reverse(
    ffi.Pointer<SubtreeArray> arg0,
  ) {
    return _ts_subtree_array_reverse(
      arg0,
    );
  }

  late final _ts_subtree_array_reversePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<SubtreeArray>)>>(
          'ts_subtree_array_reverse');
  late final _ts_subtree_array_reverse = _ts_subtree_array_reversePtr
      .asFunction<void Function(ffi.Pointer<SubtreeArray>)>();

  SubtreePool ts_subtree_pool_new(
    int capacity,
  ) {
    return _ts_subtree_pool_new(
      capacity,
    );
  }

  late final _ts_subtree_pool_newPtr =
      _lookup<ffi.NativeFunction<SubtreePool Function(ffi.Uint32)>>(
          'ts_subtree_pool_new');
  late final _ts_subtree_pool_new =
      _ts_subtree_pool_newPtr.asFunction<SubtreePool Function(int)>();

  void ts_subtree_pool_delete(
    ffi.Pointer<SubtreePool> arg0,
  ) {
    return _ts_subtree_pool_delete(
      arg0,
    );
  }

  late final _ts_subtree_pool_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<SubtreePool>)>>(
          'ts_subtree_pool_delete');
  late final _ts_subtree_pool_delete = _ts_subtree_pool_deletePtr
      .asFunction<void Function(ffi.Pointer<SubtreePool>)>();

  void ts_subtree_set_symbol(
    ffi.Pointer<MutableSubtree> arg0,
    int arg1,
    ffi.Pointer<TSLanguage> arg2,
  ) {
    return _ts_subtree_set_symbol(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ts_subtree_set_symbolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<MutableSubtree>, ffi.Uint16,
              ffi.Pointer<TSLanguage>)>>('ts_subtree_set_symbol');
  late final _ts_subtree_set_symbol = _ts_subtree_set_symbolPtr.asFunction<
      void Function(
          ffi.Pointer<MutableSubtree>, int, ffi.Pointer<TSLanguage>)>();

  void ts_tree_cursor_init(
    ffi.Pointer<TreeCursor> arg0,
    TSNode arg1,
  ) {
    return _ts_tree_cursor_init(
      arg0,
      arg1,
    );
  }

  late final _ts_tree_cursor_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<TreeCursor>, TSNode)>>(
      'ts_tree_cursor_init');
  late final _ts_tree_cursor_init = _ts_tree_cursor_initPtr
      .asFunction<void Function(ffi.Pointer<TreeCursor>, TSNode)>();

  void ts_tree_cursor_current_status(
    ffi.Pointer<TSTreeCursor> arg0,
    ffi.Pointer<ffi.Uint16> arg1,
    ffi.Pointer<ffi.Bool> arg2,
    ffi.Pointer<ffi.Bool> arg3,
    ffi.Pointer<ffi.Bool> arg4,
    ffi.Pointer<ffi.Uint16> arg5,
    ffi.Pointer<ffi.UnsignedInt> arg6,
  ) {
    return _ts_tree_cursor_current_status(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _ts_tree_cursor_current_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<TSTreeCursor>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.UnsignedInt>)>>('ts_tree_cursor_current_status');
  late final _ts_tree_cursor_current_status =
      _ts_tree_cursor_current_statusPtr.asFunction<
          void Function(
              ffi.Pointer<TSTreeCursor>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.UnsignedInt>)>();

  TreeCursorStep ts_tree_cursor_goto_first_child_internal(
    ffi.Pointer<TSTreeCursor> arg0,
  ) {
    return TreeCursorStep.fromValue(_ts_tree_cursor_goto_first_child_internal(
      arg0,
    ));
  }

  late final _ts_tree_cursor_goto_first_child_internalPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<TSTreeCursor>)>>(
      'ts_tree_cursor_goto_first_child_internal');
  late final _ts_tree_cursor_goto_first_child_internal =
      _ts_tree_cursor_goto_first_child_internalPtr
          .asFunction<int Function(ffi.Pointer<TSTreeCursor>)>();

  TreeCursorStep ts_tree_cursor_goto_next_sibling_internal(
    ffi.Pointer<TSTreeCursor> arg0,
  ) {
    return TreeCursorStep.fromValue(_ts_tree_cursor_goto_next_sibling_internal(
      arg0,
    ));
  }

  late final _ts_tree_cursor_goto_next_sibling_internalPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<TSTreeCursor>)>>(
      'ts_tree_cursor_goto_next_sibling_internal');
  late final _ts_tree_cursor_goto_next_sibling_internal =
      _ts_tree_cursor_goto_next_sibling_internalPtr
          .asFunction<int Function(ffi.Pointer<TSTreeCursor>)>();

  TSNode ts_tree_cursor_parent_node(
    ffi.Pointer<TSTreeCursor> arg0,
  ) {
    return _ts_tree_cursor_parent_node(
      arg0,
    );
  }

  late final _ts_tree_cursor_parent_nodePtr =
      _lookup<ffi.NativeFunction<TSNode Function(ffi.Pointer<TSTreeCursor>)>>(
          'ts_tree_cursor_parent_node');
  late final _ts_tree_cursor_parent_node = _ts_tree_cursor_parent_nodePtr
      .asFunction<TSNode Function(ffi.Pointer<TSTreeCursor>)>();

  void ts_range_array_get_changed_ranges(
    ffi.Pointer<TSRange> old_ranges,
    int old_range_count,
    ffi.Pointer<TSRange> new_ranges,
    int new_range_count,
    ffi.Pointer<TSRangeArray> differences,
  ) {
    return _ts_range_array_get_changed_ranges(
      old_ranges,
      old_range_count,
      new_ranges,
      new_range_count,
      differences,
    );
  }

  late final _ts_range_array_get_changed_rangesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<TSRange>,
              ffi.UnsignedInt,
              ffi.Pointer<TSRange>,
              ffi.UnsignedInt,
              ffi.Pointer<TSRangeArray>)>>('ts_range_array_get_changed_ranges');
  late final _ts_range_array_get_changed_ranges =
      _ts_range_array_get_changed_rangesPtr.asFunction<
          void Function(ffi.Pointer<TSRange>, int, ffi.Pointer<TSRange>, int,
              ffi.Pointer<TSRangeArray>)>();

  bool ts_range_array_intersects(
    ffi.Pointer<TSRangeArray> self,
    int start_index,
    int start_byte,
    int end_byte,
  ) {
    return _ts_range_array_intersects(
      self,
      start_index,
      start_byte,
      end_byte,
    );
  }

  late final _ts_range_array_intersectsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<TSRangeArray>, ffi.UnsignedInt,
              ffi.Uint32, ffi.Uint32)>>('ts_range_array_intersects');
  late final _ts_range_array_intersects = _ts_range_array_intersectsPtr
      .asFunction<bool Function(ffi.Pointer<TSRangeArray>, int, int, int)>();

  int ts_subtree_get_changed_ranges(
    ffi.Pointer<Subtree> old_tree,
    ffi.Pointer<Subtree> new_tree,
    ffi.Pointer<TreeCursor> cursor1,
    ffi.Pointer<TreeCursor> cursor2,
    ffi.Pointer<TSLanguage> language,
    ffi.Pointer<TSRangeArray> included_range_differences,
    ffi.Pointer<ffi.Pointer<TSRange>> ranges,
  ) {
    return _ts_subtree_get_changed_ranges(
      old_tree,
      new_tree,
      cursor1,
      cursor2,
      language,
      included_range_differences,
      ranges,
    );
  }

  late final _ts_subtree_get_changed_rangesPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<Subtree>,
                  ffi.Pointer<Subtree>,
                  ffi.Pointer<TreeCursor>,
                  ffi.Pointer<TreeCursor>,
                  ffi.Pointer<TSLanguage>,
                  ffi.Pointer<TSRangeArray>,
                  ffi.Pointer<ffi.Pointer<TSRange>>)>>(
      'ts_subtree_get_changed_ranges');
  late final _ts_subtree_get_changed_ranges =
      _ts_subtree_get_changed_rangesPtr.asFunction<
          int Function(
              ffi.Pointer<Subtree>,
              ffi.Pointer<Subtree>,
              ffi.Pointer<TreeCursor>,
              ffi.Pointer<TreeCursor>,
              ffi.Pointer<TSLanguage>,
              ffi.Pointer<TSRangeArray>,
              ffi.Pointer<ffi.Pointer<TSRange>>)>();

  void ts_language_table_entry(
    ffi.Pointer<TSLanguage> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<TableEntry> arg3,
  ) {
    return _ts_language_table_entry(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ts_language_table_entryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TSLanguage>, ffi.Uint16, ffi.Uint16,
              ffi.Pointer<TableEntry>)>>('ts_language_table_entry');
  late final _ts_language_table_entry = _ts_language_table_entryPtr.asFunction<
      void Function(
          ffi.Pointer<TSLanguage>, int, int, ffi.Pointer<TableEntry>)>();

  TSSymbolMetadata ts_language_symbol_metadata(
    ffi.Pointer<TSLanguage> arg0,
    int arg1,
  ) {
    return _ts_language_symbol_metadata(
      arg0,
      arg1,
    );
  }

  late final _ts_language_symbol_metadataPtr = _lookup<
      ffi.NativeFunction<
          TSSymbolMetadata Function(ffi.Pointer<TSLanguage>,
              ffi.Uint16)>>('ts_language_symbol_metadata');
  late final _ts_language_symbol_metadata = _ts_language_symbol_metadataPtr
      .asFunction<TSSymbolMetadata Function(ffi.Pointer<TSLanguage>, int)>();

  int ts_language_public_symbol(
    ffi.Pointer<TSLanguage> arg0,
    int arg1,
  ) {
    return _ts_language_public_symbol(
      arg0,
      arg1,
    );
  }

  late final _ts_language_public_symbolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint16 Function(ffi.Pointer<TSLanguage>,
              ffi.Uint16)>>('ts_language_public_symbol');
  late final _ts_language_public_symbol = _ts_language_public_symbolPtr
      .asFunction<int Function(ffi.Pointer<TSLanguage>, int)>();

  void ts_range_array_add(
    ffi.Pointer<TSRangeArray> self,
    Length start,
    Length end,
  ) {
    return _ts_range_array_add(
      self,
      start,
      end,
    );
  }

  late final _ts_range_array_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TSRangeArray>, Length,
              Length)>>('ts_range_array_add');
  late final _ts_range_array_add = _ts_range_array_addPtr
      .asFunction<void Function(ffi.Pointer<TSRangeArray>, Length, Length)>();

  bool ts_wasm_store_start(
    ffi.Pointer<TSWasmStore> arg0,
    ffi.Pointer<TSLexer> arg1,
    ffi.Pointer<TSLanguage> arg2,
  ) {
    return _ts_wasm_store_start(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ts_wasm_store_startPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<TSWasmStore>, ffi.Pointer<TSLexer>,
              ffi.Pointer<TSLanguage>)>>('ts_wasm_store_start');
  late final _ts_wasm_store_start = _ts_wasm_store_startPtr.asFunction<
      bool Function(ffi.Pointer<TSWasmStore>, ffi.Pointer<TSLexer>,
          ffi.Pointer<TSLanguage>)>();

  void ts_wasm_store_reset(
    ffi.Pointer<TSWasmStore> arg0,
  ) {
    return _ts_wasm_store_reset(
      arg0,
    );
  }

  late final _ts_wasm_store_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TSWasmStore>)>>(
          'ts_wasm_store_reset');
  late final _ts_wasm_store_reset = _ts_wasm_store_resetPtr
      .asFunction<void Function(ffi.Pointer<TSWasmStore>)>();

  bool ts_wasm_store_has_error(
    ffi.Pointer<TSWasmStore> arg0,
  ) {
    return _ts_wasm_store_has_error(
      arg0,
    );
  }

  late final _ts_wasm_store_has_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<TSWasmStore>)>>(
          'ts_wasm_store_has_error');
  late final _ts_wasm_store_has_error = _ts_wasm_store_has_errorPtr
      .asFunction<bool Function(ffi.Pointer<TSWasmStore>)>();

  bool ts_wasm_store_call_lex_main(
    ffi.Pointer<TSWasmStore> arg0,
    int arg1,
  ) {
    return _ts_wasm_store_call_lex_main(
      arg0,
      arg1,
    );
  }

  late final _ts_wasm_store_call_lex_mainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<TSWasmStore>,
              ffi.Uint16)>>('ts_wasm_store_call_lex_main');
  late final _ts_wasm_store_call_lex_main = _ts_wasm_store_call_lex_mainPtr
      .asFunction<bool Function(ffi.Pointer<TSWasmStore>, int)>();

  bool ts_wasm_store_call_lex_keyword(
    ffi.Pointer<TSWasmStore> arg0,
    int arg1,
  ) {
    return _ts_wasm_store_call_lex_keyword(
      arg0,
      arg1,
    );
  }

  late final _ts_wasm_store_call_lex_keywordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<TSWasmStore>,
              ffi.Uint16)>>('ts_wasm_store_call_lex_keyword');
  late final _ts_wasm_store_call_lex_keyword =
      _ts_wasm_store_call_lex_keywordPtr
          .asFunction<bool Function(ffi.Pointer<TSWasmStore>, int)>();

  int ts_wasm_store_call_scanner_create(
    ffi.Pointer<TSWasmStore> arg0,
  ) {
    return _ts_wasm_store_call_scanner_create(
      arg0,
    );
  }

  late final _ts_wasm_store_call_scanner_createPtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<TSWasmStore>)>>(
      'ts_wasm_store_call_scanner_create');
  late final _ts_wasm_store_call_scanner_create =
      _ts_wasm_store_call_scanner_createPtr
          .asFunction<int Function(ffi.Pointer<TSWasmStore>)>();

  void ts_wasm_store_call_scanner_destroy(
    ffi.Pointer<TSWasmStore> arg0,
    int arg1,
  ) {
    return _ts_wasm_store_call_scanner_destroy(
      arg0,
      arg1,
    );
  }

  late final _ts_wasm_store_call_scanner_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TSWasmStore>,
              ffi.Uint32)>>('ts_wasm_store_call_scanner_destroy');
  late final _ts_wasm_store_call_scanner_destroy =
      _ts_wasm_store_call_scanner_destroyPtr
          .asFunction<void Function(ffi.Pointer<TSWasmStore>, int)>();

  bool ts_wasm_store_call_scanner_scan(
    ffi.Pointer<TSWasmStore> arg0,
    int arg1,
    int arg2,
  ) {
    return _ts_wasm_store_call_scanner_scan(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ts_wasm_store_call_scanner_scanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<TSWasmStore>, ffi.Uint32,
              ffi.Uint32)>>('ts_wasm_store_call_scanner_scan');
  late final _ts_wasm_store_call_scanner_scan =
      _ts_wasm_store_call_scanner_scanPtr
          .asFunction<bool Function(ffi.Pointer<TSWasmStore>, int, int)>();

  int ts_wasm_store_call_scanner_serialize(
    ffi.Pointer<TSWasmStore> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _ts_wasm_store_call_scanner_serialize(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ts_wasm_store_call_scanner_serializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<TSWasmStore>, ffi.Uint32,
              ffi.Pointer<ffi.Char>)>>('ts_wasm_store_call_scanner_serialize');
  late final _ts_wasm_store_call_scanner_serialize =
      _ts_wasm_store_call_scanner_serializePtr.asFunction<
          int Function(ffi.Pointer<TSWasmStore>, int, ffi.Pointer<ffi.Char>)>();

  void ts_wasm_store_call_scanner_deserialize(
    ffi.Pointer<TSWasmStore> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
  ) {
    return _ts_wasm_store_call_scanner_deserialize(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ts_wasm_store_call_scanner_deserializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<TSWasmStore>,
              ffi.Uint32,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('ts_wasm_store_call_scanner_deserialize');
  late final _ts_wasm_store_call_scanner_deserialize =
      _ts_wasm_store_call_scanner_deserializePtr.asFunction<
          void Function(
              ffi.Pointer<TSWasmStore>, int, ffi.Pointer<ffi.Char>, int)>();

  void ts_wasm_language_retain(
    ffi.Pointer<TSLanguage> arg0,
  ) {
    return _ts_wasm_language_retain(
      arg0,
    );
  }

  late final _ts_wasm_language_retainPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TSLanguage>)>>(
          'ts_wasm_language_retain');
  late final _ts_wasm_language_retain = _ts_wasm_language_retainPtr
      .asFunction<void Function(ffi.Pointer<TSLanguage>)>();

  void ts_wasm_language_release(
    ffi.Pointer<TSLanguage> arg0,
  ) {
    return _ts_wasm_language_release(
      arg0,
    );
  }

  late final _ts_wasm_language_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TSLanguage>)>>(
          'ts_wasm_language_release');
  late final _ts_wasm_language_release = _ts_wasm_language_releasePtr
      .asFunction<void Function(ffi.Pointer<TSLanguage>)>();

  void ts_lexer_init(
    ffi.Pointer<Lexer> arg0,
  ) {
    return _ts_lexer_init(
      arg0,
    );
  }

  late final _ts_lexer_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Lexer>)>>(
          'ts_lexer_init');
  late final _ts_lexer_init =
      _ts_lexer_initPtr.asFunction<void Function(ffi.Pointer<Lexer>)>();

  void ts_lexer_delete(
    ffi.Pointer<Lexer> arg0,
  ) {
    return _ts_lexer_delete(
      arg0,
    );
  }

  late final _ts_lexer_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Lexer>)>>(
          'ts_lexer_delete');
  late final _ts_lexer_delete =
      _ts_lexer_deletePtr.asFunction<void Function(ffi.Pointer<Lexer>)>();

  void ts_lexer_set_input(
    ffi.Pointer<Lexer> arg0,
    TSInput arg1,
  ) {
    return _ts_lexer_set_input(
      arg0,
      arg1,
    );
  }

  late final _ts_lexer_set_inputPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Lexer>, TSInput)>>(
      'ts_lexer_set_input');
  late final _ts_lexer_set_input = _ts_lexer_set_inputPtr
      .asFunction<void Function(ffi.Pointer<Lexer>, TSInput)>();

  void ts_lexer_reset(
    ffi.Pointer<Lexer> arg0,
    Length arg1,
  ) {
    return _ts_lexer_reset(
      arg0,
      arg1,
    );
  }

  late final _ts_lexer_resetPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Lexer>, Length)>>(
      'ts_lexer_reset');
  late final _ts_lexer_reset = _ts_lexer_resetPtr
      .asFunction<void Function(ffi.Pointer<Lexer>, Length)>();

  void ts_lexer_start(
    ffi.Pointer<Lexer> arg0,
  ) {
    return _ts_lexer_start(
      arg0,
    );
  }

  late final _ts_lexer_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Lexer>)>>(
          'ts_lexer_start');
  late final _ts_lexer_start =
      _ts_lexer_startPtr.asFunction<void Function(ffi.Pointer<Lexer>)>();

  void ts_lexer_finish(
    ffi.Pointer<Lexer> arg0,
    ffi.Pointer<ffi.Uint32> arg1,
  ) {
    return _ts_lexer_finish(
      arg0,
      arg1,
    );
  }

  late final _ts_lexer_finishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Lexer>, ffi.Pointer<ffi.Uint32>)>>('ts_lexer_finish');
  late final _ts_lexer_finish = _ts_lexer_finishPtr
      .asFunction<void Function(ffi.Pointer<Lexer>, ffi.Pointer<ffi.Uint32>)>();

  void ts_lexer_advance_to_end(
    ffi.Pointer<Lexer> arg0,
  ) {
    return _ts_lexer_advance_to_end(
      arg0,
    );
  }

  late final _ts_lexer_advance_to_endPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Lexer>)>>(
          'ts_lexer_advance_to_end');
  late final _ts_lexer_advance_to_end = _ts_lexer_advance_to_endPtr
      .asFunction<void Function(ffi.Pointer<Lexer>)>();

  void ts_lexer_mark_end(
    ffi.Pointer<Lexer> arg0,
  ) {
    return _ts_lexer_mark_end(
      arg0,
    );
  }

  late final _ts_lexer_mark_endPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Lexer>)>>(
          'ts_lexer_mark_end');
  late final _ts_lexer_mark_end =
      _ts_lexer_mark_endPtr.asFunction<void Function(ffi.Pointer<Lexer>)>();

  bool ts_lexer_set_included_ranges(
    ffi.Pointer<Lexer> self,
    ffi.Pointer<TSRange> ranges,
    int count,
  ) {
    return _ts_lexer_set_included_ranges(
      self,
      ranges,
      count,
    );
  }

  late final _ts_lexer_set_included_rangesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<Lexer>, ffi.Pointer<TSRange>,
              ffi.Uint32)>>('ts_lexer_set_included_ranges');
  late final _ts_lexer_set_included_ranges =
      _ts_lexer_set_included_rangesPtr.asFunction<
          bool Function(ffi.Pointer<Lexer>, ffi.Pointer<TSRange>, int)>();

  ffi.Pointer<TSRange> ts_lexer_included_ranges(
    ffi.Pointer<Lexer> self,
    ffi.Pointer<ffi.Uint32> count,
  ) {
    return _ts_lexer_included_ranges(
      self,
      count,
    );
  }

  late final _ts_lexer_included_rangesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TSRange> Function(ffi.Pointer<Lexer>,
              ffi.Pointer<ffi.Uint32>)>>('ts_lexer_included_ranges');
  late final _ts_lexer_included_ranges =
      _ts_lexer_included_rangesPtr.asFunction<
          ffi.Pointer<TSRange> Function(
              ffi.Pointer<Lexer>, ffi.Pointer<ffi.Uint32>)>();

  bool ts_lexer__eof(
    ffi.Pointer<TSLexer> _self,
  ) {
    return _ts_lexer__eof(
      _self,
    );
  }

  late final _ts_lexer__eofPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<TSLexer>)>>(
          'ts_lexer__eof');
  late final _ts_lexer__eof =
      _ts_lexer__eofPtr.asFunction<bool Function(ffi.Pointer<TSLexer>)>();

  void ts_lexer__clear_chunk(
    ffi.Pointer<Lexer> self,
  ) {
    return _ts_lexer__clear_chunk(
      self,
    );
  }

  late final _ts_lexer__clear_chunkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Lexer>)>>(
          'ts_lexer__clear_chunk');
  late final _ts_lexer__clear_chunk =
      _ts_lexer__clear_chunkPtr.asFunction<void Function(ffi.Pointer<Lexer>)>();

  void ts_lexer__get_chunk(
    ffi.Pointer<Lexer> self,
  ) {
    return _ts_lexer__get_chunk(
      self,
    );
  }

  late final _ts_lexer__get_chunkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Lexer>)>>(
          'ts_lexer__get_chunk');
  late final _ts_lexer__get_chunk =
      _ts_lexer__get_chunkPtr.asFunction<void Function(ffi.Pointer<Lexer>)>();

  void ts_lexer__get_lookahead(
    ffi.Pointer<Lexer> self,
  ) {
    return _ts_lexer__get_lookahead(
      self,
    );
  }

  late final _ts_lexer__get_lookaheadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Lexer>)>>(
          'ts_lexer__get_lookahead');
  late final _ts_lexer__get_lookahead = _ts_lexer__get_lookaheadPtr
      .asFunction<void Function(ffi.Pointer<Lexer>)>();

  void ts_lexer_goto(
    ffi.Pointer<Lexer> self,
    Length position,
  ) {
    return _ts_lexer_goto(
      self,
      position,
    );
  }

  late final _ts_lexer_gotoPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Lexer>, Length)>>(
      'ts_lexer_goto');
  late final _ts_lexer_goto =
      _ts_lexer_gotoPtr.asFunction<void Function(ffi.Pointer<Lexer>, Length)>();

  void ts_lexer__do_advance(
    ffi.Pointer<Lexer> self,
    bool skip,
  ) {
    return _ts_lexer__do_advance(
      self,
      skip,
    );
  }

  late final _ts_lexer__do_advancePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Lexer>, ffi.Bool)>>(
      'ts_lexer__do_advance');
  late final _ts_lexer__do_advance = _ts_lexer__do_advancePtr
      .asFunction<void Function(ffi.Pointer<Lexer>, bool)>();

  void ts_lexer__advance(
    ffi.Pointer<TSLexer> _self,
    bool skip,
  ) {
    return _ts_lexer__advance(
      _self,
      skip,
    );
  }

  late final _ts_lexer__advancePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<TSLexer>, ffi.Bool)>>(
      'ts_lexer__advance');
  late final _ts_lexer__advance = _ts_lexer__advancePtr
      .asFunction<void Function(ffi.Pointer<TSLexer>, bool)>();

  void ts_lexer__mark_end(
    ffi.Pointer<TSLexer> _self,
  ) {
    return _ts_lexer__mark_end(
      _self,
    );
  }

  late final _ts_lexer__mark_endPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TSLexer>)>>(
          'ts_lexer__mark_end');
  late final _ts_lexer__mark_end =
      _ts_lexer__mark_endPtr.asFunction<void Function(ffi.Pointer<TSLexer>)>();

  int ts_lexer__get_column(
    ffi.Pointer<TSLexer> _self,
  ) {
    return _ts_lexer__get_column(
      _self,
    );
  }

  late final _ts_lexer__get_columnPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<TSLexer>)>>(
          'ts_lexer__get_column');
  late final _ts_lexer__get_column =
      _ts_lexer__get_columnPtr.asFunction<int Function(ffi.Pointer<TSLexer>)>();

  bool ts_lexer__is_at_included_range_start(
    ffi.Pointer<TSLexer> _self,
  ) {
    return _ts_lexer__is_at_included_range_start(
      _self,
    );
  }

  late final _ts_lexer__is_at_included_range_startPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<TSLexer>)>>(
          'ts_lexer__is_at_included_range_start');
  late final _ts_lexer__is_at_included_range_start =
      _ts_lexer__is_at_included_range_startPtr
          .asFunction<bool Function(ffi.Pointer<TSLexer>)>();

  TSNode ts_node_new(
    ffi.Pointer<TSTree> arg0,
    ffi.Pointer<Subtree> arg1,
    Length arg2,
    int arg3,
  ) {
    return _ts_node_new(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ts_node_newPtr = _lookup<
      ffi.NativeFunction<
          TSNode Function(ffi.Pointer<TSTree>, ffi.Pointer<Subtree>, Length,
              ffi.Uint16)>>('ts_node_new');
  late final _ts_node_new = _ts_node_newPtr.asFunction<
      TSNode Function(
          ffi.Pointer<TSTree>, ffi.Pointer<Subtree>, Length, int)>();

  ffi.Pointer<Stack> ts_stack_new(
    ffi.Pointer<SubtreePool> arg0,
  ) {
    return _ts_stack_new(
      arg0,
    );
  }

  late final _ts_stack_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Stack> Function(
              ffi.Pointer<SubtreePool>)>>('ts_stack_new');
  late final _ts_stack_new = _ts_stack_newPtr
      .asFunction<ffi.Pointer<Stack> Function(ffi.Pointer<SubtreePool>)>();

  void ts_stack_delete(
    ffi.Pointer<Stack> arg0,
  ) {
    return _ts_stack_delete(
      arg0,
    );
  }

  late final _ts_stack_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Stack>)>>(
          'ts_stack_delete');
  late final _ts_stack_delete =
      _ts_stack_deletePtr.asFunction<void Function(ffi.Pointer<Stack>)>();

  int ts_stack_version_count(
    ffi.Pointer<Stack> arg0,
  ) {
    return _ts_stack_version_count(
      arg0,
    );
  }

  late final _ts_stack_version_countPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<Stack>)>>(
          'ts_stack_version_count');
  late final _ts_stack_version_count =
      _ts_stack_version_countPtr.asFunction<int Function(ffi.Pointer<Stack>)>();

  int ts_stack_state(
    ffi.Pointer<Stack> arg0,
    int arg1,
  ) {
    return _ts_stack_state(
      arg0,
      arg1,
    );
  }

  late final _ts_stack_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint16 Function(
              ffi.Pointer<Stack>, ffi.UnsignedInt)>>('ts_stack_state');
  late final _ts_stack_state =
      _ts_stack_statePtr.asFunction<int Function(ffi.Pointer<Stack>, int)>();

  Length ts_stack_position(
    ffi.Pointer<Stack> arg0,
    int arg1,
  ) {
    return _ts_stack_position(
      arg0,
      arg1,
    );
  }

  late final _ts_stack_positionPtr = _lookup<
      ffi.NativeFunction<
          Length Function(
              ffi.Pointer<Stack>, ffi.UnsignedInt)>>('ts_stack_position');
  late final _ts_stack_position = _ts_stack_positionPtr
      .asFunction<Length Function(ffi.Pointer<Stack>, int)>();

  StackSliceArray ts_stack_pop_count(
    ffi.Pointer<Stack> arg0,
    int arg1,
    int count,
  ) {
    return _ts_stack_pop_count(
      arg0,
      arg1,
      count,
    );
  }

  late final _ts_stack_pop_countPtr = _lookup<
      ffi.NativeFunction<
          StackSliceArray Function(ffi.Pointer<Stack>, ffi.UnsignedInt,
              ffi.Uint32)>>('ts_stack_pop_count');
  late final _ts_stack_pop_count = _ts_stack_pop_countPtr
      .asFunction<StackSliceArray Function(ffi.Pointer<Stack>, int, int)>();

  SubtreeArray ts_stack_pop_error(
    ffi.Pointer<Stack> arg0,
    int arg1,
  ) {
    return _ts_stack_pop_error(
      arg0,
      arg1,
    );
  }

  late final _ts_stack_pop_errorPtr = _lookup<
      ffi.NativeFunction<
          SubtreeArray Function(
              ffi.Pointer<Stack>, ffi.UnsignedInt)>>('ts_stack_pop_error');
  late final _ts_stack_pop_error = _ts_stack_pop_errorPtr
      .asFunction<SubtreeArray Function(ffi.Pointer<Stack>, int)>();

  StackSliceArray ts_stack_pop_pending(
    ffi.Pointer<Stack> arg0,
    int arg1,
  ) {
    return _ts_stack_pop_pending(
      arg0,
      arg1,
    );
  }

  late final _ts_stack_pop_pendingPtr = _lookup<
      ffi.NativeFunction<
          StackSliceArray Function(
              ffi.Pointer<Stack>, ffi.UnsignedInt)>>('ts_stack_pop_pending');
  late final _ts_stack_pop_pending = _ts_stack_pop_pendingPtr
      .asFunction<StackSliceArray Function(ffi.Pointer<Stack>, int)>();

  StackSliceArray ts_stack_pop_all(
    ffi.Pointer<Stack> arg0,
    int arg1,
  ) {
    return _ts_stack_pop_all(
      arg0,
      arg1,
    );
  }

  late final _ts_stack_pop_allPtr = _lookup<
      ffi.NativeFunction<
          StackSliceArray Function(
              ffi.Pointer<Stack>, ffi.UnsignedInt)>>('ts_stack_pop_all');
  late final _ts_stack_pop_all = _ts_stack_pop_allPtr
      .asFunction<StackSliceArray Function(ffi.Pointer<Stack>, int)>();

  int ts_stack_node_count_since_error(
    ffi.Pointer<Stack> arg0,
    int arg1,
  ) {
    return _ts_stack_node_count_since_error(
      arg0,
      arg1,
    );
  }

  late final _ts_stack_node_count_since_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<Stack>,
              ffi.UnsignedInt)>>('ts_stack_node_count_since_error');
  late final _ts_stack_node_count_since_error =
      _ts_stack_node_count_since_errorPtr
          .asFunction<int Function(ffi.Pointer<Stack>, int)>();

  int ts_stack_dynamic_precedence(
    ffi.Pointer<Stack> arg0,
    int arg1,
  ) {
    return _ts_stack_dynamic_precedence(
      arg0,
      arg1,
    );
  }

  late final _ts_stack_dynamic_precedencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Stack>,
              ffi.UnsignedInt)>>('ts_stack_dynamic_precedence');
  late final _ts_stack_dynamic_precedence = _ts_stack_dynamic_precedencePtr
      .asFunction<int Function(ffi.Pointer<Stack>, int)>();

  bool ts_stack_has_advanced_since_error(
    ffi.Pointer<Stack> arg0,
    int arg1,
  ) {
    return _ts_stack_has_advanced_since_error(
      arg0,
      arg1,
    );
  }

  late final _ts_stack_has_advanced_since_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<Stack>,
              ffi.UnsignedInt)>>('ts_stack_has_advanced_since_error');
  late final _ts_stack_has_advanced_since_error =
      _ts_stack_has_advanced_since_errorPtr
          .asFunction<bool Function(ffi.Pointer<Stack>, int)>();

  void ts_stack_record_summary(
    ffi.Pointer<Stack> arg0,
    int arg1,
    int max_depth,
  ) {
    return _ts_stack_record_summary(
      arg0,
      arg1,
      max_depth,
    );
  }

  late final _ts_stack_record_summaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Stack>, ffi.UnsignedInt,
              ffi.UnsignedInt)>>('ts_stack_record_summary');
  late final _ts_stack_record_summary = _ts_stack_record_summaryPtr
      .asFunction<void Function(ffi.Pointer<Stack>, int, int)>();

  ffi.Pointer<StackSummary> ts_stack_get_summary(
    ffi.Pointer<Stack> arg0,
    int arg1,
  ) {
    return _ts_stack_get_summary(
      arg0,
      arg1,
    );
  }

  late final _ts_stack_get_summaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<StackSummary> Function(
              ffi.Pointer<Stack>, ffi.UnsignedInt)>>('ts_stack_get_summary');
  late final _ts_stack_get_summary = _ts_stack_get_summaryPtr.asFunction<
      ffi.Pointer<StackSummary> Function(ffi.Pointer<Stack>, int)>();

  int ts_stack_error_cost(
    ffi.Pointer<Stack> arg0,
    int version,
  ) {
    return _ts_stack_error_cost(
      arg0,
      version,
    );
  }

  late final _ts_stack_error_costPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<Stack>, ffi.UnsignedInt)>>('ts_stack_error_cost');
  late final _ts_stack_error_cost = _ts_stack_error_costPtr
      .asFunction<int Function(ffi.Pointer<Stack>, int)>();

  bool ts_stack_merge(
    ffi.Pointer<Stack> arg0,
    int arg1,
    int arg2,
  ) {
    return _ts_stack_merge(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ts_stack_mergePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<Stack>, ffi.UnsignedInt,
              ffi.UnsignedInt)>>('ts_stack_merge');
  late final _ts_stack_merge = _ts_stack_mergePtr
      .asFunction<bool Function(ffi.Pointer<Stack>, int, int)>();

  bool ts_stack_can_merge(
    ffi.Pointer<Stack> arg0,
    int arg1,
    int arg2,
  ) {
    return _ts_stack_can_merge(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ts_stack_can_mergePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<Stack>, ffi.UnsignedInt,
              ffi.UnsignedInt)>>('ts_stack_can_merge');
  late final _ts_stack_can_merge = _ts_stack_can_mergePtr
      .asFunction<bool Function(ffi.Pointer<Stack>, int, int)>();

  void ts_stack_halt(
    ffi.Pointer<Stack> arg0,
    int arg1,
  ) {
    return _ts_stack_halt(
      arg0,
      arg1,
    );
  }

  late final _ts_stack_haltPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Stack>, ffi.UnsignedInt)>>('ts_stack_halt');
  late final _ts_stack_halt =
      _ts_stack_haltPtr.asFunction<void Function(ffi.Pointer<Stack>, int)>();

  bool ts_stack_is_active(
    ffi.Pointer<Stack> arg0,
    int arg1,
  ) {
    return _ts_stack_is_active(
      arg0,
      arg1,
    );
  }

  late final _ts_stack_is_activePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<Stack>, ffi.UnsignedInt)>>('ts_stack_is_active');
  late final _ts_stack_is_active = _ts_stack_is_activePtr
      .asFunction<bool Function(ffi.Pointer<Stack>, int)>();

  bool ts_stack_is_paused(
    ffi.Pointer<Stack> arg0,
    int arg1,
  ) {
    return _ts_stack_is_paused(
      arg0,
      arg1,
    );
  }

  late final _ts_stack_is_pausedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<Stack>, ffi.UnsignedInt)>>('ts_stack_is_paused');
  late final _ts_stack_is_paused = _ts_stack_is_pausedPtr
      .asFunction<bool Function(ffi.Pointer<Stack>, int)>();

  bool ts_stack_is_halted(
    ffi.Pointer<Stack> arg0,
    int arg1,
  ) {
    return _ts_stack_is_halted(
      arg0,
      arg1,
    );
  }

  late final _ts_stack_is_haltedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<Stack>, ffi.UnsignedInt)>>('ts_stack_is_halted');
  late final _ts_stack_is_halted = _ts_stack_is_haltedPtr
      .asFunction<bool Function(ffi.Pointer<Stack>, int)>();

  void ts_stack_renumber_version(
    ffi.Pointer<Stack> arg0,
    int arg1,
    int arg2,
  ) {
    return _ts_stack_renumber_version(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ts_stack_renumber_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Stack>, ffi.UnsignedInt,
              ffi.UnsignedInt)>>('ts_stack_renumber_version');
  late final _ts_stack_renumber_version = _ts_stack_renumber_versionPtr
      .asFunction<void Function(ffi.Pointer<Stack>, int, int)>();

  void ts_stack_swap_versions(
    ffi.Pointer<Stack> arg0,
    int arg1,
    int arg2,
  ) {
    return _ts_stack_swap_versions(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ts_stack_swap_versionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Stack>, ffi.UnsignedInt,
              ffi.UnsignedInt)>>('ts_stack_swap_versions');
  late final _ts_stack_swap_versions = _ts_stack_swap_versionsPtr
      .asFunction<void Function(ffi.Pointer<Stack>, int, int)>();

  int ts_stack_copy_version(
    ffi.Pointer<Stack> arg0,
    int arg1,
  ) {
    return _ts_stack_copy_version(
      arg0,
      arg1,
    );
  }

  late final _ts_stack_copy_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<Stack>, ffi.UnsignedInt)>>('ts_stack_copy_version');
  late final _ts_stack_copy_version = _ts_stack_copy_versionPtr
      .asFunction<int Function(ffi.Pointer<Stack>, int)>();

  void ts_stack_remove_version(
    ffi.Pointer<Stack> arg0,
    int arg1,
  ) {
    return _ts_stack_remove_version(
      arg0,
      arg1,
    );
  }

  late final _ts_stack_remove_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Stack>, ffi.UnsignedInt)>>('ts_stack_remove_version');
  late final _ts_stack_remove_version = _ts_stack_remove_versionPtr
      .asFunction<void Function(ffi.Pointer<Stack>, int)>();

  void ts_stack_clear(
    ffi.Pointer<Stack> arg0,
  ) {
    return _ts_stack_clear(
      arg0,
    );
  }

  late final _ts_stack_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Stack>)>>(
          'ts_stack_clear');
  late final _ts_stack_clear =
      _ts_stack_clearPtr.asFunction<void Function(ffi.Pointer<Stack>)>();

  bool ts_stack_print_dot_graph(
    ffi.Pointer<Stack> arg0,
    ffi.Pointer<TSLanguage> arg1,
    ffi.Pointer<_IO_FILE> arg2,
  ) {
    return _ts_stack_print_dot_graph(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ts_stack_print_dot_graphPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<Stack>, ffi.Pointer<TSLanguage>,
              ffi.Pointer<_IO_FILE>)>>('ts_stack_print_dot_graph');
  late final _ts_stack_print_dot_graph =
      _ts_stack_print_dot_graphPtr.asFunction<
          bool Function(ffi.Pointer<Stack>, ffi.Pointer<TSLanguage>,
              ffi.Pointer<_IO_FILE>)>();

  ffi.Pointer<ffi.Char> ts_string_input_read(
    ffi.Pointer<ffi.Void> _self,
    int byte,
    TSPoint point,
    ffi.Pointer<ffi.Uint32> length,
  ) {
    return _ts_string_input_read(
      _self,
      byte,
      point,
      length,
    );
  }

  late final _ts_string_input_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>, ffi.Uint32,
              TSPoint, ffi.Pointer<ffi.Uint32>)>>('ts_string_input_read');
  late final _ts_string_input_read = _ts_string_input_readPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Void>, int, TSPoint, ffi.Pointer<ffi.Uint32>)>();

  void ts_parser__log(
    ffi.Pointer<TSParser> self,
  ) {
    return _ts_parser__log(
      self,
    );
  }

  late final _ts_parser__logPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TSParser>)>>(
          'ts_parser__log');
  late final _ts_parser__log =
      _ts_parser__logPtr.asFunction<void Function(ffi.Pointer<TSParser>)>();

  bool ts_parser__breakdown_top_of_stack(
    ffi.Pointer<TSParser> self,
    int version,
  ) {
    return _ts_parser__breakdown_top_of_stack(
      self,
      version,
    );
  }

  late final _ts_parser__breakdown_top_of_stackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<TSParser>,
              ffi.UnsignedInt)>>('ts_parser__breakdown_top_of_stack');
  late final _ts_parser__breakdown_top_of_stack =
      _ts_parser__breakdown_top_of_stackPtr
          .asFunction<bool Function(ffi.Pointer<TSParser>, int)>();

  void ts_parser__breakdown_lookahead(
    ffi.Pointer<TSParser> self,
    ffi.Pointer<Subtree> lookahead,
    int state,
    ffi.Pointer<ReusableNode> reusable_node,
  ) {
    return _ts_parser__breakdown_lookahead(
      self,
      lookahead,
      state,
      reusable_node,
    );
  }

  late final _ts_parser__breakdown_lookaheadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<TSParser>,
              ffi.Pointer<Subtree>,
              ffi.Uint16,
              ffi.Pointer<ReusableNode>)>>('ts_parser__breakdown_lookahead');
  late final _ts_parser__breakdown_lookahead =
      _ts_parser__breakdown_lookaheadPtr.asFunction<
          void Function(ffi.Pointer<TSParser>, ffi.Pointer<Subtree>, int,
              ffi.Pointer<ReusableNode>)>();

  ErrorComparison ts_parser__compare_versions(
    ffi.Pointer<TSParser> self,
    ErrorStatus a,
    ErrorStatus b,
  ) {
    return ErrorComparison.fromValue(_ts_parser__compare_versions(
      self,
      a,
      b,
    ));
  }

  late final _ts_parser__compare_versionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<TSParser>, ErrorStatus,
              ErrorStatus)>>('ts_parser__compare_versions');
  late final _ts_parser__compare_versions =
      _ts_parser__compare_versionsPtr.asFunction<
          int Function(ffi.Pointer<TSParser>, ErrorStatus, ErrorStatus)>();

  ErrorStatus ts_parser__version_status(
    ffi.Pointer<TSParser> self,
    int version,
  ) {
    return _ts_parser__version_status(
      self,
      version,
    );
  }

  late final _ts_parser__version_statusPtr = _lookup<
      ffi.NativeFunction<
          ErrorStatus Function(ffi.Pointer<TSParser>,
              ffi.UnsignedInt)>>('ts_parser__version_status');
  late final _ts_parser__version_status = _ts_parser__version_statusPtr
      .asFunction<ErrorStatus Function(ffi.Pointer<TSParser>, int)>();

  bool ts_parser__better_version_exists(
    ffi.Pointer<TSParser> self,
    int version,
    bool is_in_error,
    int cost,
  ) {
    return _ts_parser__better_version_exists(
      self,
      version,
      is_in_error,
      cost,
    );
  }

  late final _ts_parser__better_version_existsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<TSParser>, ffi.UnsignedInt, ffi.Bool,
              ffi.UnsignedInt)>>('ts_parser__better_version_exists');
  late final _ts_parser__better_version_exists =
      _ts_parser__better_version_existsPtr
          .asFunction<bool Function(ffi.Pointer<TSParser>, int, bool, int)>();

  bool ts_parser__call_main_lex_fn(
    ffi.Pointer<TSParser> self,
    TSLexMode lex_mode,
  ) {
    return _ts_parser__call_main_lex_fn(
      self,
      lex_mode,
    );
  }

  late final _ts_parser__call_main_lex_fnPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<TSParser>, TSLexMode)>>(
      'ts_parser__call_main_lex_fn');
  late final _ts_parser__call_main_lex_fn = _ts_parser__call_main_lex_fnPtr
      .asFunction<bool Function(ffi.Pointer<TSParser>, TSLexMode)>();

  bool ts_parser__call_keyword_lex_fn(
    ffi.Pointer<TSParser> self,
    TSLexMode lex_mode,
  ) {
    return _ts_parser__call_keyword_lex_fn(
      self,
      lex_mode,
    );
  }

  late final _ts_parser__call_keyword_lex_fnPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<TSParser>, TSLexMode)>>(
      'ts_parser__call_keyword_lex_fn');
  late final _ts_parser__call_keyword_lex_fn =
      _ts_parser__call_keyword_lex_fnPtr
          .asFunction<bool Function(ffi.Pointer<TSParser>, TSLexMode)>();

  void ts_parser__external_scanner_create(
    ffi.Pointer<TSParser> self,
  ) {
    return _ts_parser__external_scanner_create(
      self,
    );
  }

  late final _ts_parser__external_scanner_createPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TSParser>)>>(
          'ts_parser__external_scanner_create');
  late final _ts_parser__external_scanner_create =
      _ts_parser__external_scanner_createPtr
          .asFunction<void Function(ffi.Pointer<TSParser>)>();

  void ts_parser__external_scanner_destroy(
    ffi.Pointer<TSParser> self,
  ) {
    return _ts_parser__external_scanner_destroy(
      self,
    );
  }

  late final _ts_parser__external_scanner_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TSParser>)>>(
          'ts_parser__external_scanner_destroy');
  late final _ts_parser__external_scanner_destroy =
      _ts_parser__external_scanner_destroyPtr
          .asFunction<void Function(ffi.Pointer<TSParser>)>();

  int ts_parser__external_scanner_serialize(
    ffi.Pointer<TSParser> self,
  ) {
    return _ts_parser__external_scanner_serialize(
      self,
    );
  }

  late final _ts_parser__external_scanner_serializePtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<TSParser>)>>(
      'ts_parser__external_scanner_serialize');
  late final _ts_parser__external_scanner_serialize =
      _ts_parser__external_scanner_serializePtr
          .asFunction<int Function(ffi.Pointer<TSParser>)>();

  bool ts_parser__external_scanner_scan(
    ffi.Pointer<TSParser> self,
    int external_lex_state,
  ) {
    return _ts_parser__external_scanner_scan(
      self,
      external_lex_state,
    );
  }

  late final _ts_parser__external_scanner_scanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<TSParser>,
              ffi.Uint16)>>('ts_parser__external_scanner_scan');
  late final _ts_parser__external_scanner_scan =
      _ts_parser__external_scanner_scanPtr
          .asFunction<bool Function(ffi.Pointer<TSParser>, int)>();

  bool ts_parser__has_included_range_difference(
    ffi.Pointer<TSParser> self,
    int start_position,
    int end_position,
  ) {
    return _ts_parser__has_included_range_difference(
      self,
      start_position,
      end_position,
    );
  }

  late final _ts_parser__has_included_range_differencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<TSParser>, ffi.Uint32,
              ffi.Uint32)>>('ts_parser__has_included_range_difference');
  late final _ts_parser__has_included_range_difference =
      _ts_parser__has_included_range_differencePtr
          .asFunction<bool Function(ffi.Pointer<TSParser>, int, int)>();

  int ts_parser__reduce(
    ffi.Pointer<TSParser> self,
    int version,
    int symbol,
    int count,
    int dynamic_precedence,
    int production_id,
    bool is_fragile,
    bool end_of_non_terminal_extra,
  ) {
    return _ts_parser__reduce(
      self,
      version,
      symbol,
      count,
      dynamic_precedence,
      production_id,
      is_fragile,
      end_of_non_terminal_extra,
    );
  }

  late final _ts_parser__reducePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<TSParser>,
              ffi.UnsignedInt,
              ffi.Uint16,
              ffi.Uint32,
              ffi.Int,
              ffi.Uint16,
              ffi.Bool,
              ffi.Bool)>>('ts_parser__reduce');
  late final _ts_parser__reduce = _ts_parser__reducePtr.asFunction<
      int Function(
          ffi.Pointer<TSParser>, int, int, int, int, int, bool, bool)>();

  bool ts_parser__do_all_potential_reductions(
    ffi.Pointer<TSParser> self,
    int starting_version,
    int lookahead_symbol,
  ) {
    return _ts_parser__do_all_potential_reductions(
      self,
      starting_version,
      lookahead_symbol,
    );
  }

  late final _ts_parser__do_all_potential_reductionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<TSParser>, ffi.UnsignedInt,
              ffi.Uint16)>>('ts_parser__do_all_potential_reductions');
  late final _ts_parser__do_all_potential_reductions =
      _ts_parser__do_all_potential_reductionsPtr
          .asFunction<bool Function(ffi.Pointer<TSParser>, int, int)>();

  bool ts_parser__recover_to_state(
    ffi.Pointer<TSParser> self,
    int version,
    int depth,
    int goal_state,
  ) {
    return _ts_parser__recover_to_state(
      self,
      version,
      depth,
      goal_state,
    );
  }

  late final _ts_parser__recover_to_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<TSParser>, ffi.UnsignedInt,
              ffi.UnsignedInt, ffi.Uint16)>>('ts_parser__recover_to_state');
  late final _ts_parser__recover_to_state = _ts_parser__recover_to_statePtr
      .asFunction<bool Function(ffi.Pointer<TSParser>, int, int, int)>();

  bool ts_parser__advance(
    ffi.Pointer<TSParser> self,
    int version,
    bool allow_node_reuse,
  ) {
    return _ts_parser__advance(
      self,
      version,
      allow_node_reuse,
    );
  }

  late final _ts_parser__advancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<TSParser>, ffi.UnsignedInt,
              ffi.Bool)>>('ts_parser__advance');
  late final _ts_parser__advance = _ts_parser__advancePtr
      .asFunction<bool Function(ffi.Pointer<TSParser>, int, bool)>();

  int ts_parser__condense_stack(
    ffi.Pointer<TSParser> self,
  ) {
    return _ts_parser__condense_stack(
      self,
    );
  }

  late final _ts_parser__condense_stackPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<TSParser>)>>(
      'ts_parser__condense_stack');
  late final _ts_parser__condense_stack = _ts_parser__condense_stackPtr
      .asFunction<int Function(ffi.Pointer<TSParser>)>();

  bool ts_parser_has_outstanding_parse(
    ffi.Pointer<TSParser> self,
  ) {
    return _ts_parser_has_outstanding_parse(
      self,
    );
  }

  late final _ts_parser_has_outstanding_parsePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<TSParser>)>>(
          'ts_parser_has_outstanding_parse');
  late final _ts_parser_has_outstanding_parse =
      _ts_parser_has_outstanding_parsePtr
          .asFunction<bool Function(ffi.Pointer<TSParser>)>();

  void ts_query__perform_analysis(
    ffi.Pointer<TSQuery> self,
    ffi.Pointer<AnalysisSubgraphArray> subgraphs,
    ffi.Pointer<QueryAnalysis> analysis,
  ) {
    return _ts_query__perform_analysis(
      self,
      subgraphs,
      analysis,
    );
  }

  late final _ts_query__perform_analysisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<TSQuery>,
              ffi.Pointer<AnalysisSubgraphArray>,
              ffi.Pointer<QueryAnalysis>)>>('ts_query__perform_analysis');
  late final _ts_query__perform_analysis =
      _ts_query__perform_analysisPtr.asFunction<
          void Function(
              ffi.Pointer<TSQuery>,
              ffi.Pointer<AnalysisSubgraphArray>,
              ffi.Pointer<QueryAnalysis>)>();

  bool ts_query__analyze_patterns(
    ffi.Pointer<TSQuery> self,
    ffi.Pointer<ffi.UnsignedInt> error_offset,
  ) {
    return _ts_query__analyze_patterns(
      self,
      error_offset,
    );
  }

  late final _ts_query__analyze_patternsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<TSQuery>,
              ffi.Pointer<ffi.UnsignedInt>)>>('ts_query__analyze_patterns');
  late final _ts_query__analyze_patterns =
      _ts_query__analyze_patternsPtr.asFunction<
          bool Function(ffi.Pointer<TSQuery>, ffi.Pointer<ffi.UnsignedInt>)>();

  void ts_query__add_negated_fields(
    ffi.Pointer<TSQuery> self,
    int step_index,
    ffi.Pointer<ffi.Uint16> field_ids,
    int field_count,
  ) {
    return _ts_query__add_negated_fields(
      self,
      step_index,
      field_ids,
      field_count,
    );
  }

  late final _ts_query__add_negated_fieldsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<TSQuery>,
              ffi.Uint16,
              ffi.Pointer<ffi.Uint16>,
              ffi.Uint16)>>('ts_query__add_negated_fields');
  late final _ts_query__add_negated_fields =
      _ts_query__add_negated_fieldsPtr.asFunction<
          void Function(
              ffi.Pointer<TSQuery>, int, ffi.Pointer<ffi.Uint16>, int)>();

  TSQueryError ts_query__parse_string_literal(
    ffi.Pointer<TSQuery> self,
    ffi.Pointer<Stream> stream,
  ) {
    return TSQueryError.fromValue(_ts_query__parse_string_literal(
      self,
      stream,
    ));
  }

  late final _ts_query__parse_string_literalPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<TSQuery>,
              ffi.Pointer<Stream>)>>('ts_query__parse_string_literal');
  late final _ts_query__parse_string_literal =
      _ts_query__parse_string_literalPtr.asFunction<
          int Function(ffi.Pointer<TSQuery>, ffi.Pointer<Stream>)>();

  TSQueryError ts_query__parse_predicate(
    ffi.Pointer<TSQuery> self,
    ffi.Pointer<Stream> stream,
  ) {
    return TSQueryError.fromValue(_ts_query__parse_predicate(
      self,
      stream,
    ));
  }

  late final _ts_query__parse_predicatePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<TSQuery>,
              ffi.Pointer<Stream>)>>('ts_query__parse_predicate');
  late final _ts_query__parse_predicate = _ts_query__parse_predicatePtr
      .asFunction<int Function(ffi.Pointer<TSQuery>, ffi.Pointer<Stream>)>();

  TSQueryError ts_query__parse_pattern(
    ffi.Pointer<TSQuery> self,
    ffi.Pointer<Stream> stream,
    int depth,
    bool is_immediate,
    ffi.Pointer<CaptureQuantifiers> capture_quantifiers,
  ) {
    return TSQueryError.fromValue(_ts_query__parse_pattern(
      self,
      stream,
      depth,
      is_immediate,
      capture_quantifiers,
    ));
  }

  late final _ts_query__parse_patternPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<TSQuery>,
              ffi.Pointer<Stream>,
              ffi.Uint32,
              ffi.Bool,
              ffi.Pointer<CaptureQuantifiers>)>>('ts_query__parse_pattern');
  late final _ts_query__parse_pattern = _ts_query__parse_patternPtr.asFunction<
      int Function(ffi.Pointer<TSQuery>, ffi.Pointer<Stream>, int, bool,
          ffi.Pointer<CaptureQuantifiers>)>();

  bool ts_query__step_is_fallible(
    ffi.Pointer<TSQuery> self,
    int step_index,
  ) {
    return _ts_query__step_is_fallible(
      self,
      step_index,
    );
  }

  late final _ts_query__step_is_falliblePtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<TSQuery>, ffi.Uint16)>>(
      'ts_query__step_is_fallible');
  late final _ts_query__step_is_fallible = _ts_query__step_is_falliblePtr
      .asFunction<bool Function(ffi.Pointer<TSQuery>, int)>();

  bool ts_query_cursor__first_in_progress_capture(
    ffi.Pointer<TSQueryCursor> self,
    ffi.Pointer<ffi.Uint32> state_index,
    ffi.Pointer<ffi.Uint32> byte_offset,
    ffi.Pointer<ffi.Uint32> pattern_index,
    ffi.Pointer<ffi.Bool> root_pattern_guaranteed,
  ) {
    return _ts_query_cursor__first_in_progress_capture(
      self,
      state_index,
      byte_offset,
      pattern_index,
      root_pattern_guaranteed,
    );
  }

  late final _ts_query_cursor__first_in_progress_capturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(
                  ffi.Pointer<TSQueryCursor>,
                  ffi.Pointer<ffi.Uint32>,
                  ffi.Pointer<ffi.Uint32>,
                  ffi.Pointer<ffi.Uint32>,
                  ffi.Pointer<ffi.Bool>)>>(
      'ts_query_cursor__first_in_progress_capture');
  late final _ts_query_cursor__first_in_progress_capture =
      _ts_query_cursor__first_in_progress_capturePtr.asFunction<
          bool Function(
              ffi.Pointer<TSQueryCursor>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<ffi.Bool>)>();

  int ts_query_cursor__compare_nodes(
    TSNode left,
    TSNode right,
  ) {
    return _ts_query_cursor__compare_nodes(
      left,
      right,
    );
  }

  late final _ts_query_cursor__compare_nodesPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(TSNode, TSNode)>>(
          'ts_query_cursor__compare_nodes');
  late final _ts_query_cursor__compare_nodes =
      _ts_query_cursor__compare_nodesPtr
          .asFunction<int Function(TSNode, TSNode)>();

  void ts_query_cursor__compare_captures(
    ffi.Pointer<TSQueryCursor> self,
    ffi.Pointer<QueryState> left_state,
    ffi.Pointer<QueryState> right_state,
    ffi.Pointer<ffi.Bool> left_contains_right,
    ffi.Pointer<ffi.Bool> right_contains_left,
  ) {
    return _ts_query_cursor__compare_captures(
      self,
      left_state,
      right_state,
      left_contains_right,
      right_contains_left,
    );
  }

  late final _ts_query_cursor__compare_capturesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<TSQueryCursor>,
              ffi.Pointer<QueryState>,
              ffi.Pointer<QueryState>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>)>>('ts_query_cursor__compare_captures');
  late final _ts_query_cursor__compare_captures =
      _ts_query_cursor__compare_capturesPtr.asFunction<
          void Function(
              ffi.Pointer<TSQueryCursor>,
              ffi.Pointer<QueryState>,
              ffi.Pointer<QueryState>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>)>();

  void ts_query_cursor__add_state(
    ffi.Pointer<TSQueryCursor> self,
    ffi.Pointer<PatternEntry> pattern,
  ) {
    return _ts_query_cursor__add_state(
      self,
      pattern,
    );
  }

  late final _ts_query_cursor__add_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TSQueryCursor>,
              ffi.Pointer<PatternEntry>)>>('ts_query_cursor__add_state');
  late final _ts_query_cursor__add_state =
      _ts_query_cursor__add_statePtr.asFunction<
          void Function(
              ffi.Pointer<TSQueryCursor>, ffi.Pointer<PatternEntry>)>();

  ffi.Pointer<CaptureList> ts_query_cursor__prepare_to_capture(
    ffi.Pointer<TSQueryCursor> self,
    ffi.Pointer<QueryState> state,
    int state_index_to_preserve,
  ) {
    return _ts_query_cursor__prepare_to_capture(
      self,
      state,
      state_index_to_preserve,
    );
  }

  late final _ts_query_cursor__prepare_to_capturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CaptureList> Function(
              ffi.Pointer<TSQueryCursor>,
              ffi.Pointer<QueryState>,
              ffi.UnsignedInt)>>('ts_query_cursor__prepare_to_capture');
  late final _ts_query_cursor__prepare_to_capture =
      _ts_query_cursor__prepare_to_capturePtr.asFunction<
          ffi.Pointer<CaptureList> Function(
              ffi.Pointer<TSQueryCursor>, ffi.Pointer<QueryState>, int)>();

  void ts_query_cursor__capture(
    ffi.Pointer<TSQueryCursor> self,
    ffi.Pointer<QueryState> state,
    ffi.Pointer<QueryStep> step,
    TSNode node,
  ) {
    return _ts_query_cursor__capture(
      self,
      state,
      step,
      node,
    );
  }

  late final _ts_query_cursor__capturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TSQueryCursor>, ffi.Pointer<QueryState>,
              ffi.Pointer<QueryStep>, TSNode)>>('ts_query_cursor__capture');
  late final _ts_query_cursor__capture =
      _ts_query_cursor__capturePtr.asFunction<
          void Function(ffi.Pointer<TSQueryCursor>, ffi.Pointer<QueryState>,
              ffi.Pointer<QueryStep>, TSNode)>();

  ffi.Pointer<QueryState> ts_query_cursor__copy_state(
    ffi.Pointer<TSQueryCursor> self,
    ffi.Pointer<ffi.Pointer<QueryState>> state_ref,
  ) {
    return _ts_query_cursor__copy_state(
      self,
      state_ref,
    );
  }

  late final _ts_query_cursor__copy_statePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<QueryState> Function(ffi.Pointer<TSQueryCursor>,
                  ffi.Pointer<ffi.Pointer<QueryState>>)>>(
      'ts_query_cursor__copy_state');
  late final _ts_query_cursor__copy_state =
      _ts_query_cursor__copy_statePtr.asFunction<
          ffi.Pointer<QueryState> Function(ffi.Pointer<TSQueryCursor>,
              ffi.Pointer<ffi.Pointer<QueryState>>)>();

  int ts_stack__add_version(
    ffi.Pointer<Stack> self,
    int original_version,
    ffi.Pointer<StackNode> node,
  ) {
    return _ts_stack__add_version(
      self,
      original_version,
      node,
    );
  }

  late final _ts_stack__add_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<Stack>, ffi.UnsignedInt,
              ffi.Pointer<StackNode>)>>('ts_stack__add_version');
  late final _ts_stack__add_version = _ts_stack__add_versionPtr.asFunction<
      int Function(ffi.Pointer<Stack>, int, ffi.Pointer<StackNode>)>();

  void ts_stack__add_slice(
    ffi.Pointer<Stack> self,
    int original_version,
    ffi.Pointer<StackNode> node,
    ffi.Pointer<SubtreeArray> subtrees,
  ) {
    return _ts_stack__add_slice(
      self,
      original_version,
      node,
      subtrees,
    );
  }

  late final _ts_stack__add_slicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Stack>,
              ffi.UnsignedInt,
              ffi.Pointer<StackNode>,
              ffi.Pointer<SubtreeArray>)>>('ts_stack__add_slice');
  late final _ts_stack__add_slice = _ts_stack__add_slicePtr.asFunction<
      void Function(ffi.Pointer<Stack>, int, ffi.Pointer<StackNode>,
          ffi.Pointer<SubtreeArray>)>();

  ExternalScannerState ts_external_scanner_state_copy(
    ffi.Pointer<ExternalScannerState> self,
  ) {
    return _ts_external_scanner_state_copy(
      self,
    );
  }

  late final _ts_external_scanner_state_copyPtr = _lookup<
          ffi.NativeFunction<
              ExternalScannerState Function(
                  ffi.Pointer<ExternalScannerState>)>>(
      'ts_external_scanner_state_copy');
  late final _ts_external_scanner_state_copy =
      _ts_external_scanner_state_copyPtr.asFunction<
          ExternalScannerState Function(ffi.Pointer<ExternalScannerState>)>();

  ffi.Pointer<SubtreeHeapData> ts_subtree_pool_allocate(
    ffi.Pointer<SubtreePool> self,
  ) {
    return _ts_subtree_pool_allocate(
      self,
    );
  }

  late final _ts_subtree_pool_allocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<SubtreeHeapData> Function(
              ffi.Pointer<SubtreePool>)>>('ts_subtree_pool_allocate');
  late final _ts_subtree_pool_allocate =
      _ts_subtree_pool_allocatePtr.asFunction<
          ffi.Pointer<SubtreeHeapData> Function(ffi.Pointer<SubtreePool>)>();

  void ts_subtree_pool_free(
    ffi.Pointer<SubtreePool> self,
    ffi.Pointer<SubtreeHeapData> tree,
  ) {
    return _ts_subtree_pool_free(
      self,
      tree,
    );
  }

  late final _ts_subtree_pool_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<SubtreePool>,
              ffi.Pointer<SubtreeHeapData>)>>('ts_subtree_pool_free');
  late final _ts_subtree_pool_free = _ts_subtree_pool_freePtr.asFunction<
      void Function(ffi.Pointer<SubtreePool>, ffi.Pointer<SubtreeHeapData>)>();

  int ts_subtree__write_char_to_string(
    ffi.Pointer<ffi.Char> str,
    int n,
    int chr,
  ) {
    return _ts_subtree__write_char_to_string(
      str,
      n,
      chr,
    );
  }

  late final _ts_subtree__write_char_to_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Int32)>>('ts_subtree__write_char_to_string');
  late final _ts_subtree__write_char_to_string =
      _ts_subtree__write_char_to_stringPtr
          .asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  void ts_subtree__print_dot_graph(
    ffi.Pointer<Subtree> self,
    int start_offset,
    ffi.Pointer<TSLanguage> language,
    int alias_symbol,
    ffi.Pointer<_IO_FILE> f,
  ) {
    return _ts_subtree__print_dot_graph(
      self,
      start_offset,
      language,
      alias_symbol,
      f,
    );
  }

  late final _ts_subtree__print_dot_graphPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Subtree>,
              ffi.Uint32,
              ffi.Pointer<TSLanguage>,
              ffi.Uint16,
              ffi.Pointer<_IO_FILE>)>>('ts_subtree__print_dot_graph');
  late final _ts_subtree__print_dot_graph =
      _ts_subtree__print_dot_graphPtr.asFunction<
          void Function(ffi.Pointer<Subtree>, int, ffi.Pointer<TSLanguage>, int,
              ffi.Pointer<_IO_FILE>)>();

  TreeCursorStep ts_tree_cursor_goto_last_child_internal(
    ffi.Pointer<TSTreeCursor> _self,
  ) {
    return TreeCursorStep.fromValue(_ts_tree_cursor_goto_last_child_internal(
      _self,
    ));
  }

  late final _ts_tree_cursor_goto_last_child_internalPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<TSTreeCursor>)>>(
      'ts_tree_cursor_goto_last_child_internal');
  late final _ts_tree_cursor_goto_last_child_internal =
      _ts_tree_cursor_goto_last_child_internalPtr
          .asFunction<int Function(ffi.Pointer<TSTreeCursor>)>();

  TreeCursorStep ts_tree_cursor_goto_sibling_internal(
    ffi.Pointer<TSTreeCursor> _self,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Bool Function(ffi.Pointer<CursorChildIterator>,
                    ffi.Pointer<TreeCursorEntry>, ffi.Pointer<ffi.Bool>)>>
        advance,
  ) {
    return TreeCursorStep.fromValue(_ts_tree_cursor_goto_sibling_internal(
      _self,
      advance,
    ));
  }

  late final _ts_tree_cursor_goto_sibling_internalPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<TSTreeCursor>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Bool Function(
                              ffi.Pointer<CursorChildIterator>,
                              ffi.Pointer<TreeCursorEntry>,
                              ffi.Pointer<ffi.Bool>)>>)>>(
      'ts_tree_cursor_goto_sibling_internal');
  late final _ts_tree_cursor_goto_sibling_internal =
      _ts_tree_cursor_goto_sibling_internalPtr.asFunction<
          int Function(
              ffi.Pointer<TSTreeCursor>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Bool Function(
                          ffi.Pointer<CursorChildIterator>,
                          ffi.Pointer<TreeCursorEntry>,
                          ffi.Pointer<ffi.Bool>)>>)>();

  TreeCursorStep ts_tree_cursor_goto_previous_sibling_internal(
    ffi.Pointer<TSTreeCursor> _self,
  ) {
    return TreeCursorStep.fromValue(
        _ts_tree_cursor_goto_previous_sibling_internal(
      _self,
    ));
  }

  late final _ts_tree_cursor_goto_previous_sibling_internalPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<TSTreeCursor>)>>(
      'ts_tree_cursor_goto_previous_sibling_internal');
  late final _ts_tree_cursor_goto_previous_sibling_internal =
      _ts_tree_cursor_goto_previous_sibling_internalPtr
          .asFunction<int Function(ffi.Pointer<TSTreeCursor>)>();
}

final class TSParser extends ffi.Opaque {}

final class TSLanguage extends ffi.Struct {
  @ffi.Uint32()
  external int version;

  @ffi.Uint32()
  external int symbol_count;

  @ffi.Uint32()
  external int alias_count;

  @ffi.Uint32()
  external int token_count;

  @ffi.Uint32()
  external int external_token_count;

  @ffi.Uint32()
  external int state_count;

  @ffi.Uint32()
  external int large_state_count;

  @ffi.Uint32()
  external int production_id_count;

  @ffi.Uint32()
  external int field_count;

  @ffi.Uint16()
  external int max_alias_sequence_length;

  external ffi.Pointer<ffi.Uint16> parse_table;

  external ffi.Pointer<ffi.Uint16> small_parse_table;

  external ffi.Pointer<ffi.Uint32> small_parse_table_map;

  external ffi.Pointer<TSParseActionEntry> parse_actions;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> symbol_names;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> field_names;

  external ffi.Pointer<TSFieldMapSlice> field_map_slices;

  external ffi.Pointer<TSFieldMapEntry> field_map_entries;

  external ffi.Pointer<TSSymbolMetadata> symbol_metadata;

  external ffi.Pointer<ffi.Uint16> public_symbol_map;

  external ffi.Pointer<ffi.Uint16> alias_map;

  external ffi.Pointer<ffi.Uint16> alias_sequences;

  external ffi.Pointer<TSLexMode> lex_modes;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<TSLexer>, ffi.Uint16)>>
      lex_fn;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<TSLexer>, ffi.Uint16)>>
      keyword_lex_fn;

  @ffi.Uint16()
  external int keyword_capture_token;

  external UnnamedStruct8 external_scanner;

  external ffi.Pointer<ffi.Uint16> primary_state_ids;
}

final class TSParseActionEntry extends ffi.Union {
  external TSParseAction action;

  external UnnamedStruct7 entry;
}

final class TSParseAction extends ffi.Union {
  external UnnamedStruct5 shift;

  external UnnamedStruct6 reduce;

  @ffi.Uint8()
  external int type;
}

final class UnnamedStruct5 extends ffi.Struct {
  @ffi.Uint8()
  external int type;

  @ffi.Uint16()
  external int state;

  @ffi.Bool()
  external bool extra;

  @ffi.Bool()
  external bool repetition;
}

final class UnnamedStruct6 extends ffi.Struct {
  @ffi.Uint8()
  external int type;

  @ffi.Uint8()
  external int child_count;

  @ffi.Uint16()
  external int symbol;

  @ffi.Int16()
  external int dynamic_precedence;

  @ffi.Uint16()
  external int production_id;
}

final class UnnamedStruct7 extends ffi.Struct {
  @ffi.Uint8()
  external int count;

  @ffi.Bool()
  external bool reusable;
}

final class TSFieldMapSlice extends ffi.Struct {
  @ffi.Uint16()
  external int index;

  @ffi.Uint16()
  external int length;
}

final class TSFieldMapEntry extends ffi.Struct {
  @ffi.Uint16()
  external int field_id;

  @ffi.Uint8()
  external int child_index;

  @ffi.Bool()
  external bool inherited;
}

final class TSSymbolMetadata extends ffi.Struct {
  @ffi.Bool()
  external bool visible;

  @ffi.Bool()
  external bool named;

  @ffi.Bool()
  external bool supertype;
}

final class TSLexMode extends ffi.Struct {
  @ffi.Uint16()
  external int lex_state;

  @ffi.Uint16()
  external int external_lex_state;
}

final class TSLexer extends ffi.Struct {
  @ffi.Int32()
  external int lookahead;

  @ffi.Uint16()
  external int result_symbol;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TSLexer>, ffi.Bool)>>
      advance;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TSLexer>)>>
      mark_end;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<TSLexer>)>>
      get_column;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<TSLexer>)>>
      is_at_included_range_start;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<TSLexer>)>> eof;
}

final class UnnamedStruct8 extends ffi.Struct {
  external ffi.Pointer<ffi.Bool> states;

  external ffi.Pointer<ffi.Uint16> symbol_map;

  external ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>
      create;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      destroy;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<TSLexer>,
              ffi.Pointer<ffi.Bool>)>> scan;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>> serialize;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>> deserialize;
}

final class TSRange extends ffi.Struct {
  external TSPoint start_point;

  external TSPoint end_point;

  @ffi.Uint32()
  external int start_byte;

  @ffi.Uint32()
  external int end_byte;
}

final class TSPoint extends ffi.Struct {
  @ffi.Uint32()
  external int row;

  @ffi.Uint32()
  external int column;
}

final class TSTree extends ffi.Opaque {}

final class TSInput extends ffi.Struct {
  external ffi.Pointer<ffi.Void> payload;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void> payload,
              ffi.Uint32 byte_index,
              TSPoint position,
              ffi.Pointer<ffi.Uint32> bytes_read)>> read;

  @ffi.UnsignedInt()
  external int encoding;
}

enum TSInputEncoding {
  TSInputEncodingUTF8(0),
  TSInputEncodingUTF16(1);

  final int value;
  const TSInputEncoding(this.value);

  static TSInputEncoding fromValue(int value) => switch (value) {
        0 => TSInputEncodingUTF8,
        1 => TSInputEncodingUTF16,
        _ => throw ArgumentError("Unknown value for TSInputEncoding: $value"),
      };
}

final class TSLogger extends ffi.Struct {
  external ffi.Pointer<ffi.Void> payload;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void> payload,
              ffi.UnsignedInt log_type, ffi.Pointer<ffi.Char> buffer)>> log;
}

enum TSLogType {
  TSLogTypeParse(0),
  TSLogTypeLex(1);

  final int value;
  const TSLogType(this.value);

  static TSLogType fromValue(int value) => switch (value) {
        0 => TSLogTypeParse,
        1 => TSLogTypeLex,
        _ => throw ArgumentError("Unknown value for TSLogType: $value"),
      };
}

final class TSNode extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint32> context;

  external ffi.Pointer<ffi.Void> id;

  external ffi.Pointer<TSTree> tree;
}

final class TSInputEdit extends ffi.Struct {
  @ffi.Uint32()
  external int start_byte;

  @ffi.Uint32()
  external int old_end_byte;

  @ffi.Uint32()
  external int new_end_byte;

  external TSPoint start_point;

  external TSPoint old_end_point;

  external TSPoint new_end_point;
}

final class TSTreeCursor extends ffi.Struct {
  external ffi.Pointer<ffi.Void> tree;

  external ffi.Pointer<ffi.Void> id;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint32> context;
}

final class TSQuery extends ffi.Struct {
  external SymbolTable captures;

  external SymbolTable predicate_values;

  external UnnamedStruct12 capture_quantifiers;

  external UnnamedStruct13 steps;

  external UnnamedStruct14 pattern_map;

  external UnnamedStruct15 predicate_steps;

  external UnnamedStruct16 patterns;

  external UnnamedStruct17 step_offsets;

  external UnnamedStruct18 negated_fields;

  external UnnamedStruct19 string_buffer;

  external UnnamedStruct20 repeat_symbols_with_rootless_patterns;

  external ffi.Pointer<TSLanguage> language;

  @ffi.Uint16()
  external int wildcard_root_pattern_count;
}

final class SymbolTable extends ffi.Struct {
  external UnnamedStruct10 characters;

  external UnnamedStruct11 slices;
}

final class UnnamedStruct10 extends ffi.Struct {
  external ffi.Pointer<ffi.Char> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class UnnamedStruct11 extends ffi.Struct {
  external ffi.Pointer<Slice> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class Slice extends ffi.Struct {
  @ffi.Uint32()
  external int offset;

  @ffi.Uint32()
  external int length;
}

final class UnnamedStruct12 extends ffi.Struct {
  external ffi.Pointer<CaptureQuantifiers> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class CaptureQuantifiers extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class UnnamedStruct13 extends ffi.Struct {
  external ffi.Pointer<QueryStep> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class QueryStep extends ffi.Opaque {}

final class UnnamedStruct14 extends ffi.Struct {
  external ffi.Pointer<PatternEntry> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class PatternEntry extends ffi.Struct {
  @ffi.Uint16()
  external int step_index;

  @ffi.Uint16()
  external int pattern_index;

  @ffi.Bool()
  external bool is_rooted;
}

final class UnnamedStruct15 extends ffi.Struct {
  external ffi.Pointer<TSQueryPredicateStep> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class TSQueryPredicateStep extends ffi.Struct {
  @ffi.UnsignedInt()
  external int type;

  @ffi.Uint32()
  external int value_id;
}

enum TSQueryPredicateStepType {
  TSQueryPredicateStepTypeDone(0),
  TSQueryPredicateStepTypeCapture(1),
  TSQueryPredicateStepTypeString(2);

  final int value;
  const TSQueryPredicateStepType(this.value);

  static TSQueryPredicateStepType fromValue(int value) => switch (value) {
        0 => TSQueryPredicateStepTypeDone,
        1 => TSQueryPredicateStepTypeCapture,
        2 => TSQueryPredicateStepTypeString,
        _ => throw ArgumentError(
            "Unknown value for TSQueryPredicateStepType: $value"),
      };
}

final class UnnamedStruct16 extends ffi.Struct {
  external ffi.Pointer<QueryPattern> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class QueryPattern extends ffi.Struct {
  external Slice steps;

  external Slice predicate_steps;

  @ffi.Uint32()
  external int start_byte;

  @ffi.Bool()
  external bool is_non_local;
}

final class UnnamedStruct17 extends ffi.Struct {
  external ffi.Pointer<StepOffset> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class StepOffset extends ffi.Struct {
  @ffi.Uint32()
  external int byte_offset;

  @ffi.Uint16()
  external int step_index;
}

final class UnnamedStruct18 extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class UnnamedStruct19 extends ffi.Struct {
  external ffi.Pointer<ffi.Char> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class UnnamedStruct20 extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

enum TSQueryError {
  TSQueryErrorNone(0),
  TSQueryErrorSyntax(1),
  TSQueryErrorNodeType(2),
  TSQueryErrorField(3),
  TSQueryErrorCapture(4),
  TSQueryErrorStructure(5),
  TSQueryErrorLanguage(6);

  final int value;
  const TSQueryError(this.value);

  static TSQueryError fromValue(int value) => switch (value) {
        0 => TSQueryErrorNone,
        1 => TSQueryErrorSyntax,
        2 => TSQueryErrorNodeType,
        3 => TSQueryErrorField,
        4 => TSQueryErrorCapture,
        5 => TSQueryErrorStructure,
        6 => TSQueryErrorLanguage,
        _ => throw ArgumentError("Unknown value for TSQueryError: $value"),
      };
}

enum TSQuantifier {
  TSQuantifierZero(0),
  TSQuantifierZeroOrOne(1),
  TSQuantifierZeroOrMore(2),
  TSQuantifierOne(3),
  TSQuantifierOneOrMore(4);

  final int value;
  const TSQuantifier(this.value);

  static TSQuantifier fromValue(int value) => switch (value) {
        0 => TSQuantifierZero,
        1 => TSQuantifierZeroOrOne,
        2 => TSQuantifierZeroOrMore,
        3 => TSQuantifierOne,
        4 => TSQuantifierOneOrMore,
        _ => throw ArgumentError("Unknown value for TSQuantifier: $value"),
      };
}

final class TSQueryCursor extends ffi.Struct {
  external ffi.Pointer<TSQuery> query;

  external TSTreeCursor cursor;

  external UnnamedStruct21 states;

  external UnnamedStruct22 finished_states;

  external CaptureListPool capture_list_pool;

  @ffi.Uint32()
  external int depth;

  @ffi.Uint32()
  external int max_start_depth;

  @ffi.Uint32()
  external int start_byte;

  @ffi.Uint32()
  external int end_byte;

  external TSPoint start_point;

  external TSPoint end_point;

  @ffi.Uint32()
  external int next_state_id;

  @ffi.Bool()
  external bool on_visible_node;

  @ffi.Bool()
  external bool ascending;

  @ffi.Bool()
  external bool halted;

  @ffi.Bool()
  external bool did_exceed_match_limit;
}

final class UnnamedStruct21 extends ffi.Struct {
  external ffi.Pointer<QueryState> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class QueryState extends ffi.Opaque {}

final class UnnamedStruct22 extends ffi.Struct {
  external ffi.Pointer<QueryState> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class CaptureListPool extends ffi.Struct {
  external UnnamedStruct23 list;

  external CaptureList empty_list;

  @ffi.Uint32()
  external int max_capture_list_count;

  @ffi.Uint32()
  external int free_capture_list_count;
}

final class UnnamedStruct23 extends ffi.Struct {
  external ffi.Pointer<CaptureList> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class CaptureList extends ffi.Struct {
  external ffi.Pointer<TSQueryCapture> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class TSQueryCapture extends ffi.Struct {
  external TSNode node;

  @ffi.Uint32()
  external int index;
}

final class TSQueryMatch extends ffi.Struct {
  @ffi.Uint32()
  external int id;

  @ffi.Uint16()
  external int pattern_index;

  @ffi.Uint16()
  external int capture_count;

  external ffi.Pointer<TSQueryCapture> captures;
}

enum TSSymbolType {
  TSSymbolTypeRegular(0),
  TSSymbolTypeAnonymous(1),
  TSSymbolTypeAuxiliary(2);

  final int value;
  const TSSymbolType(this.value);

  static TSSymbolType fromValue(int value) => switch (value) {
        0 => TSSymbolTypeRegular,
        1 => TSSymbolTypeAnonymous,
        2 => TSSymbolTypeAuxiliary,
        _ => throw ArgumentError("Unknown value for TSSymbolType: $value"),
      };
}

final class TSLookaheadIterator extends ffi.Opaque {}

final class TSWasmStore extends ffi.Opaque {}

final class wasm_engine_t extends ffi.Opaque {}

final class TSWasmError extends ffi.Struct {
  @ffi.UnsignedInt()
  external int kind;

  external ffi.Pointer<ffi.Char> message;
}

enum TSWasmErrorKind {
  TSWasmErrorKindNone(0),
  TSWasmErrorKindParse(1),
  TSWasmErrorKindCompile(2),
  TSWasmErrorKindInstantiate(3),
  TSWasmErrorKindAllocate(4);

  final int value;
  const TSWasmErrorKind(this.value);

  static TSWasmErrorKind fromValue(int value) => switch (value) {
        0 => TSWasmErrorKindNone,
        1 => TSWasmErrorKindParse,
        2 => TSWasmErrorKindCompile,
        3 => TSWasmErrorKindInstantiate,
        4 => TSWasmErrorKindAllocate,
        _ => throw ArgumentError("Unknown value for TSWasmErrorKind: $value"),
      };
}

final class Length extends ffi.Struct {
  @ffi.Uint32()
  external int bytes;

  external TSPoint extent;
}

final class ExternalScannerState extends ffi.Struct {
  external UnnamedUnion2 unnamed;

  @ffi.Uint32()
  external int length;
}

final class UnnamedUnion2 extends ffi.Union {
  external ffi.Pointer<ffi.Char> long_data;

  @ffi.Array.multi([24])
  external ffi.Array<ffi.Char> short_data;
}

final class SubtreeInlineData extends ffi.Opaque {}

final class SubtreeHeapData extends ffi.Opaque {}

final class Subtree extends ffi.Opaque {}

final class MutableSubtree extends ffi.Opaque {}

final class SubtreeArray extends ffi.Struct {
  external ffi.Pointer<Subtree> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class MutableSubtreeArray extends ffi.Struct {
  external ffi.Pointer<MutableSubtree> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class SubtreePool extends ffi.Struct {
  external MutableSubtreeArray free_trees;

  external MutableSubtreeArray tree_stack;
}

final class TreeCursor extends ffi.Struct {
  external ffi.Pointer<TSTree> tree;

  external UnnamedStruct24 stack;

  @ffi.Uint16()
  external int root_alias_symbol;
}

final class UnnamedStruct24 extends ffi.Struct {
  external ffi.Pointer<TreeCursorEntry> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class TreeCursorEntry extends ffi.Struct {
  external ffi.Pointer<Subtree> subtree;

  external Length position;

  @ffi.Uint32()
  external int child_index;

  @ffi.Uint32()
  external int structural_child_index;

  @ffi.Uint32()
  external int descendant_index;
}

enum TreeCursorStep {
  TreeCursorStepNone(0),
  TreeCursorStepHidden(1),
  TreeCursorStepVisible(2);

  final int value;
  const TreeCursorStep(this.value);

  static TreeCursorStep fromValue(int value) => switch (value) {
        0 => TreeCursorStepNone,
        1 => TreeCursorStepHidden,
        2 => TreeCursorStepVisible,
        _ => throw ArgumentError("Unknown value for TreeCursorStep: $value"),
      };
}

final class TSRangeArray extends ffi.Struct {
  external ffi.Pointer<TSRange> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class TableEntry extends ffi.Struct {
  external ffi.Pointer<TSParseAction> actions;

  @ffi.Uint32()
  external int action_count;

  @ffi.Bool()
  external bool is_reusable;
}

final class Lexer extends ffi.Struct {
  external TSLexer data;

  external Length current_position;

  external Length token_start_position;

  external Length token_end_position;

  external ffi.Pointer<TSRange> included_ranges;

  external ffi.Pointer<ffi.Char> chunk;

  external TSInput input;

  external TSLogger logger;

  @ffi.Uint32()
  external int included_range_count;

  @ffi.Uint32()
  external int current_included_range_index;

  @ffi.Uint32()
  external int chunk_start;

  @ffi.Uint32()
  external int chunk_size;

  @ffi.Uint32()
  external int lookahead_size;

  @ffi.Bool()
  external bool did_get_column;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Char> debug_buffer;
}

final class timespec extends ffi.Struct {
  @ffi.Long()
  external int tv_sec;

  @ffi.Long()
  external int tv_nsec;
}

final class ReduceAction extends ffi.Struct {
  @ffi.Uint32()
  external int count;

  @ffi.Uint16()
  external int symbol;

  @ffi.Int()
  external int dynamic_precedence;

  @ffi.UnsignedShort()
  external int production_id;
}

final class ReduceActionSet extends ffi.Struct {
  external ffi.Pointer<ReduceAction> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class StackEntry extends ffi.Opaque {}

final class ReusableNode extends ffi.Opaque {}

final class Stack extends ffi.Struct {
  external UnnamedStruct1 heads;

  external StackSliceArray slices;

  external UnnamedStruct4 iterators;

  external StackNodeArray node_pool;

  external ffi.Pointer<StackNode> base_node;

  external ffi.Pointer<SubtreePool> subtree_pool;
}

final class UnnamedStruct1 extends ffi.Struct {
  external ffi.Pointer<StackHead> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class StackHead extends ffi.Opaque {}

final class StackSliceArray extends ffi.Struct {
  external ffi.Pointer<StackSlice> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class StackSlice extends ffi.Struct {
  external SubtreeArray subtrees;

  @ffi.UnsignedInt()
  external int version;
}

final class UnnamedStruct4 extends ffi.Struct {
  external ffi.Pointer<StackIterator> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class StackIterator extends ffi.Struct {
  external ffi.Pointer<StackNode> node;

  external SubtreeArray subtrees;

  @ffi.Uint32()
  external int subtree_count;

  @ffi.Bool()
  external bool is_pending;
}

final class StackNode extends ffi.Opaque {}

final class StackNodeArray extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<StackNode>> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class StackSummaryEntry extends ffi.Struct {
  external Length position;

  @ffi.UnsignedInt()
  external int depth;

  @ffi.Uint16()
  external int state;
}

final class StackSummary extends ffi.Struct {
  external ffi.Pointer<StackSummaryEntry> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class _IO_FILE extends ffi.Struct {
  @ffi.Int()
  external int _flags;

  external ffi.Pointer<ffi.Char> _IO_read_ptr;

  external ffi.Pointer<ffi.Char> _IO_read_end;

  external ffi.Pointer<ffi.Char> _IO_read_base;

  external ffi.Pointer<ffi.Char> _IO_write_base;

  external ffi.Pointer<ffi.Char> _IO_write_ptr;

  external ffi.Pointer<ffi.Char> _IO_write_end;

  external ffi.Pointer<ffi.Char> _IO_buf_base;

  external ffi.Pointer<ffi.Char> _IO_buf_end;

  external ffi.Pointer<ffi.Char> _IO_save_base;

  external ffi.Pointer<ffi.Char> _IO_backup_base;

  external ffi.Pointer<ffi.Char> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int()
  external int _fileno;

  @ffi.Int()
  external int _flags2;

  @ffi.Long()
  external int _old_offset;

  @ffi.UnsignedShort()
  external int _cur_column;

  @ffi.SignedChar()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Char> _shortbuf;

  external ffi.Pointer<ffi.Void> _lock;

  @ffi.Long()
  external int _offset;

  external ffi.Pointer<_IO_codecvt> _codecvt;

  external ffi.Pointer<_IO_wide_data> _wide_data;

  external ffi.Pointer<_IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  @ffi.Size()
  external int __pad5;

  @ffi.Int()
  external int _mode;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> _unused2;
}

final class _IO_marker extends ffi.Opaque {}

final class _IO_codecvt extends ffi.Opaque {}

final class _IO_wide_data extends ffi.Opaque {}

final class TokenCache extends ffi.Opaque {}

enum ErrorComparison {
  ErrorComparisonTakeLeft(0),
  ErrorComparisonPreferLeft(1),
  ErrorComparisonNone(2),
  ErrorComparisonPreferRight(3),
  ErrorComparisonTakeRight(4);

  final int value;
  const ErrorComparison(this.value);

  static ErrorComparison fromValue(int value) => switch (value) {
        0 => ErrorComparisonTakeLeft,
        1 => ErrorComparisonPreferLeft,
        2 => ErrorComparisonNone,
        3 => ErrorComparisonPreferRight,
        4 => ErrorComparisonTakeRight,
        _ => throw ArgumentError("Unknown value for ErrorComparison: $value"),
      };
}

final class ErrorStatus extends ffi.Struct {
  @ffi.UnsignedInt()
  external int cost;

  @ffi.UnsignedInt()
  external int node_count;

  @ffi.Int()
  external int dynamic_precedence;

  @ffi.Bool()
  external bool is_in_error;
}

final class AnalysisSubgraphArray extends ffi.Struct {
  external ffi.Pointer<AnalysisSubgraph> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class AnalysisSubgraph extends ffi.Struct {
  @ffi.Uint16()
  external int symbol;

  external UnnamedStruct25 start_states;

  external UnnamedStruct26 nodes;
}

final class UnnamedStruct25 extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class UnnamedStruct26 extends ffi.Struct {
  external ffi.Pointer<AnalysisSubgraphNode> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class AnalysisSubgraphNode extends ffi.Opaque {}

final class QueryAnalysis extends ffi.Struct {
  external AnalysisStateSet states;

  external AnalysisStateSet next_states;

  external AnalysisStateSet deeper_states;

  external AnalysisStateSet state_pool;

  external UnnamedStruct27 final_step_indices;

  external UnnamedStruct28 finished_parent_symbols;

  @ffi.Bool()
  external bool did_abort;
}

final class AnalysisStateSet extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<AnalysisState>> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class AnalysisState extends ffi.Opaque {}

final class UnnamedStruct27 extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class UnnamedStruct28 extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> contents;

  @ffi.Uint32()
  external int size;

  @ffi.Uint32()
  external int capacity;
}

final class Stream extends ffi.Struct {
  external ffi.Pointer<ffi.Char> input;

  external ffi.Pointer<ffi.Char> start;

  external ffi.Pointer<ffi.Char> end;

  @ffi.Int32()
  external int next;

  @ffi.Uint8()
  external int next_size;
}

final class StackLink extends ffi.Opaque {}

enum StackStatus {
  StackStatusActive(0),
  StackStatusPaused(1),
  StackStatusHalted(2);

  final int value;
  const StackStatus(this.value);

  static StackStatus fromValue(int value) => switch (value) {
        0 => StackStatusActive,
        1 => StackStatusPaused,
        2 => StackStatusHalted,
        _ => throw ArgumentError("Unknown value for StackStatus: $value"),
      };
}

final class CursorChildIterator extends ffi.Opaque {}
